// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 gl_Vertex;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 gl_MultiTexCoord0;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0006 = gl_Vertex.x*gl_ModelViewProjectionMatrix[0];
    _r0006 = _r0006 + gl_Vertex.y*gl_ModelViewProjectionMatrix[1];
    _r0006 = _r0006 + gl_Vertex.z*gl_ModelViewProjectionMatrix[2];
    _r0006 = _r0006 + gl_Vertex.w*gl_ModelViewProjectionMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = gl_MultiTexCoord0.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
float _TMP50;
vec3 _TMP41;
vec3 _TMP43;
vec3 _TMP45;
vec3 _TMP47;
vec3 _TMP48;
vec3 _TMP46;
vec3 _TMP44;
vec3 _TMP42;
vec3 _TMP33;
vec3 _TMP35;
vec3 _TMP37;
vec3 _TMP39;
vec3 _TMP40;
vec3 _TMP38;
vec3 _TMP36;
vec3 _TMP34;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP25;
bvec4 _TMP22;
bvec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0070;
vec4 _r0114;
vec4 _r0124;
vec4 _r0134;
vec4 _r0144;
vec4 _r0154;
vec4 _r0164;
vec4 _TMP175;
vec4 _a0178;
vec4 _TMP181;
vec4 _a0184;
vec4 _TMP187;
vec4 _a0190;
vec4 _TMP191;
vec4 _a0194;
vec4 _TMP195;
vec4 _a0198;
vec4 _TMP199;
vec4 _a0202;
vec4 _TMP203;
vec4 _a0206;
vec4 _TMP209;
vec4 _a0212;
vec4 _TMP213;
vec4 _a0216;
vec4 _TMP217;
vec4 _a0220;
vec4 _TMP221;
vec4 _a0224;
vec4 _TMP225;
vec4 _a0228;
vec4 _TMP229;
vec4 _a0232;
vec4 _TMP233;
vec4 _a0236;
vec4 _TMP239;
vec4 _a0242;
vec4 _TMP243;
vec4 _a0246;
vec4 _TMP247;
vec4 _a0250;
vec4 _TMP253;
vec4 _a0256;
vec4 _TMP259;
vec4 _a0262;
vec4 _TMP265;
vec4 _a0268;
vec4 _TMP269;
vec4 _a0272;
vec4 _TMP273;
vec4 _a0276;
vec2 _r0278;
vec2 _a0284;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edri;
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _interp_restriction_lv3_left;
    bvec4 _interp_restriction_lv3_up;
    bvec4 _nc;
    bvec4 _fx;
    bvec4 _fx_left;
    bvec4 _fx_up;
    bvec4 _fx3_left;
    bvec4 _fx3_up;
    vec2 _fp;
    vec4 _wd1;
    vec4 _wd2;
    vec2 _df12;
    vec3 _res;
    _x0070 = TEX0.xy*TextureSize;
    _fp = fract(_x0070);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0114.x = dot(_TMP4.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0114.y = dot(_TMP6.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0114.z = dot(_TMP10.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0114.w = dot(_TMP8.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0124.x = dot(_TMP5.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0124.y = dot(_TMP3.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0124.z = dot(_TMP9.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0124.w = dot(_TMP11.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0134.x = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0134.y = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0134.z = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0134.w = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0144.x = dot(_TMP20.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0144.y = dot(_TMP2.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0144.z = dot(_TMP15.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0144.w = dot(_TMP12.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0154.x = dot(_TMP14.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0154.y = dot(_TMP18.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0154.z = dot(_TMP0.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0154.w = dot(_TMP17.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0164.x = dot(_TMP13.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0164.y = dot(_TMP19.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0164.z = dot(_TMP1.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0164.w = dot(_TMP16.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _fx = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).x > 1.50000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).y > 5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).z > -5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).w > 5.00000000E-01);
    _fx_left = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).x > 1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).y > 1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).z > -5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).w > 0.00000000E+00);
    _fx_up = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).x > 2.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).y > 0.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).z > -1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).w > 5.00000000E-01);
    _fx3_left = bvec4((vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x).x > 5.00000000E+00, (vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x).y > 3.00000000E+00, (vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x).z > -3.00000000E+00, (vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x).w > -1.00000000E+00);
    _fx3_up = bvec4((vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x).x > 5.00000000E+00, (vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x).y > -1.00000000E+00, (vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x).z > -3.00000000E+00, (vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x).w > 3.00000000E+00);
    _interp_restriction_lv1 = bvec4(_r0134.x != _r0114.w && _r0134.x != _r0114.z, _r0134.y != _r0114.x && _r0134.y != _r0114.w, _r0134.z != _r0114.y && _r0134.z != _r0114.x, _r0134.w != _r0114.z && _r0134.w != _r0114.y);
    _interp_restriction_lv2_left = bvec4(_r0134.x != _r0124.z && _r0114.y != _r0124.z, _r0134.y != _r0124.w && _r0114.z != _r0124.w, _r0134.z != _r0124.x && _r0114.w != _r0124.x, _r0134.w != _r0124.y && _r0114.x != _r0124.y);
    _interp_restriction_lv2_up = bvec4(_r0134.x != _r0124.x && _r0114.x != _r0124.x, _r0134.y != _r0124.y && _r0114.y != _r0124.y, _r0134.z != _r0124.z && _r0114.z != _r0124.z, _r0134.w != _r0124.w && _r0114.w != _r0124.w);
    _a0178 = _r0124.zwxy - _r0154.wxyz;
    _TMP175 = abs(_a0178);
    _TMP21 = bvec4(_TMP175.x < 9.99999978E-03, _TMP175.y < 9.99999978E-03, _TMP175.z < 9.99999978E-03, _TMP175.w < 9.99999978E-03);
    _interp_restriction_lv3_left = bvec4(_TMP21.x && _r0164.w != _r0154.w, _TMP21.y && _r0164.x != _r0154.x, _TMP21.z && _r0164.y != _r0154.y, _TMP21.w && _r0164.z != _r0154.z);
    _a0184 = _r0124 - _r0144.yzwx;
    _TMP181 = abs(_a0184);
    _TMP22 = bvec4(_TMP181.x < 9.99999978E-03, _TMP181.y < 9.99999978E-03, _TMP181.z < 9.99999978E-03, _TMP181.w < 9.99999978E-03);
    _interp_restriction_lv3_up = bvec4(_TMP22.x && _r0164.z != _r0144.y, _TMP22.y && _r0164.w != _r0144.z, _TMP22.z && _r0164.x != _r0144.w, _TMP22.w && _r0164.y != _r0144.x);
    _a0190 = _r0134 - _r0124;
    _TMP187 = abs(_a0190);
    _a0194 = _r0134 - _r0124.zwxy;
    _TMP191 = abs(_a0194);
    _a0198 = _r0124.wxyz - _r0164;
    _TMP195 = abs(_a0198);
    _a0202 = _r0124.wxyz - _r0164.yzwx;
    _TMP199 = abs(_a0202);
    _a0206 = _r0114.zwxy - _r0114.wxyz;
    _TMP203 = abs(_a0206);
    _wd1 = _TMP187 + _TMP191 + _TMP195 + _TMP199 + 4.00000000E+00*_TMP203;
    _a0212 = _r0114.zwxy - _r0114.yzwx;
    _TMP209 = abs(_a0212);
    _a0216 = _r0114.zwxy - _r0154;
    _TMP213 = abs(_a0216);
    _a0220 = _r0114.wxyz - _r0144;
    _TMP217 = abs(_a0220);
    _a0224 = _r0114.wxyz - _r0114;
    _TMP221 = abs(_a0224);
    _a0228 = _r0134 - _r0124.wxyz;
    _TMP225 = abs(_a0228);
    _wd2 = _TMP209 + _TMP213 + _TMP217 + _TMP221 + 4.00000000E+00*_TMP225;
    _edri = bvec4(_wd1.x <= _wd2.x && _interp_restriction_lv1.x, _wd1.y <= _wd2.y && _interp_restriction_lv1.y, _wd1.z <= _wd2.z && _interp_restriction_lv1.z, _wd1.w <= _wd2.w && _interp_restriction_lv1.w);
    _edr = bvec4(_wd1.x < _wd2.x && _interp_restriction_lv1.x, _wd1.y < _wd2.y && _interp_restriction_lv1.y, _wd1.z < _wd2.z && _interp_restriction_lv1.z, _wd1.w < _wd2.w && _interp_restriction_lv1.w);
    _edr = bvec4(_edr.x && (!_edri.y || !_edri.w), _edr.y && (!_edri.z || !_edri.x), _edr.z && (!_edri.w || !_edri.y), _edr.w && (!_edri.x || !_edri.z));
    _a0232 = _r0114.wxyz - _r0124.zwxy;
    _TMP229 = abs(_a0232);
    _a0236 = _r0114.zwxy - _r0124;
    _TMP233 = abs(_a0236);
    _a0242 = _r0134 - _r0124;
    _TMP239 = abs(_a0242);
    _TMP25 = bvec4(_TMP239.x < 6.00000024E-01, _TMP239.y < 6.00000024E-01, _TMP239.z < 6.00000024E-01, _TMP239.w < 6.00000024E-01);
    _edr_left = bvec4((2.00000000E+00*_TMP229).x <= _TMP233.x && _interp_restriction_lv2_left.x && _edr.x && !_edri.y && _TMP25.x, (2.00000000E+00*_TMP229).y <= _TMP233.y && _interp_restriction_lv2_left.y && _edr.y && !_edri.z && _TMP25.y, (2.00000000E+00*_TMP229).z <= _TMP233.z && _interp_restriction_lv2_left.z && _edr.z && !_edri.w && _TMP25.z, (2.00000000E+00*_TMP229).w <= _TMP233.w && _interp_restriction_lv2_left.w && _edr.w && !_edri.x && _TMP25.w);
    _a0246 = _r0114.wxyz - _r0124.zwxy;
    _TMP243 = abs(_a0246);
    _a0250 = _r0114.zwxy - _r0124;
    _TMP247 = abs(_a0250);
    _a0256 = _r0134 - _r0124.zwxy;
    _TMP253 = abs(_a0256);
    _TMP28 = bvec4(_TMP253.x < 6.00000024E-01, _TMP253.y < 6.00000024E-01, _TMP253.z < 6.00000024E-01, _TMP253.w < 6.00000024E-01);
    _edr_up = bvec4(_TMP243.x >= (2.00000000E+00*_TMP247).x && _interp_restriction_lv2_up.x && _edr.x && !_edri.w && _TMP28.x, _TMP243.y >= (2.00000000E+00*_TMP247).y && _interp_restriction_lv2_up.y && _edr.y && !_edri.x && _TMP28.y, _TMP243.z >= (2.00000000E+00*_TMP247).z && _interp_restriction_lv2_up.z && _edr.z && !_edri.y && _TMP28.z, _TMP243.w >= (2.00000000E+00*_TMP247).w && _interp_restriction_lv2_up.w && _edr.w && !_edri.z && _TMP28.w);
    _a0262 = _r0134 - _r0154.yzwx;
    _TMP259 = abs(_a0262);
    _TMP29 = bvec4(_TMP259.x < 6.00000024E-01, _TMP259.y < 6.00000024E-01, _TMP259.z < 6.00000024E-01, _TMP259.w < 6.00000024E-01);
    _a0268 = _r0134 - _r0144.wxyz;
    _TMP265 = abs(_a0268);
    _TMP30 = bvec4(_TMP265.x < 6.00000024E-01, _TMP265.y < 6.00000024E-01, _TMP265.z < 6.00000024E-01, _TMP265.w < 6.00000024E-01);
    _nc = bvec4(_edr.x && (_fx.x || _edr_left.x && (_fx_left.x || _interp_restriction_lv3_left.x && _fx3_left.x && _TMP29.x) || _edr_up.x && (_fx_up.x || _interp_restriction_lv3_up.x && _fx3_up.x && _TMP30.x)), _edr.y && (_fx.y || _edr_left.y && (_fx_left.y || _interp_restriction_lv3_left.y && _fx3_left.y && _TMP29.y) || _edr_up.y && (_fx_up.y || _interp_restriction_lv3_up.y && _fx3_up.y && _TMP30.y)), _edr.z && (_fx.z || _edr_left.z && (_fx_left.z || _interp_restriction_lv3_left.z && _fx3_left.z && _TMP29.z) || _edr_up.z && (_fx_up.z || _interp_restriction_lv3_up.z && _fx3_up.z && _TMP30.z)), _edr.w && (_fx.w || _edr_left.w && (_fx_left.w || _interp_restriction_lv3_left.w && _fx3_left.w && _TMP29.w) || _edr_up.w && (_fx_up.w || _interp_restriction_lv3_up.w && _fx3_up.w && _TMP30.w)));
    _a0272 = _r0134 - _r0114.wxyz;
    _TMP269 = abs(_a0272);
    _a0276 = _r0134 - _r0114.zwxy;
    _TMP273 = abs(_a0276);
    _px = bvec4(_TMP269.x <= _TMP273.x, _TMP269.y <= _TMP273.y, _TMP269.z <= _TMP273.z, _TMP269.w <= _TMP273.w);
    if (_nc.x) { 
        if (_px.x) { 
            _TMP34 = _TMP8.xyz;
        } else {
            _TMP34 = _TMP10.xyz;
        } 
        _TMP33 = _TMP34;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP36 = _TMP4.xyz;
            } else {
                _TMP36 = _TMP8.xyz;
            } 
            _TMP35 = _TMP36;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP38 = _TMP6.xyz;
                } else {
                    _TMP38 = _TMP4.xyz;
                } 
                _TMP37 = _TMP38;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP40 = _TMP10.xyz;
                    } else {
                        _TMP40 = _TMP6.xyz;
                    } 
                    _TMP39 = _TMP40;
                } else {
                    _TMP39 = _TMP7.xyz;
                } 
                _TMP37 = _TMP39;
            } 
            _TMP35 = _TMP37;
        } 
        _TMP33 = _TMP35;
    } 
    if (_nc.w) { 
        if (_px.w) { 
            _TMP42 = _TMP10.xyz;
        } else {
            _TMP42 = _TMP6.xyz;
        } 
        _TMP41 = _TMP42;
    } else {
        if (_nc.z) { 
            if (_px.z) { 
                _TMP44 = _TMP6.xyz;
            } else {
                _TMP44 = _TMP4.xyz;
            } 
            _TMP43 = _TMP44;
        } else {
            if (_nc.y) { 
                if (_px.y) { 
                    _TMP46 = _TMP4.xyz;
                } else {
                    _TMP46 = _TMP8.xyz;
                } 
                _TMP45 = _TMP46;
            } else {
                if (_nc.x) { 
                    if (_px.x) { 
                        _TMP48 = _TMP8.xyz;
                    } else {
                        _TMP48 = _TMP10.xyz;
                    } 
                    _TMP47 = _TMP48;
                } else {
                    _TMP47 = _TMP7.xyz;
                } 
                _TMP45 = _TMP47;
            } 
            _TMP43 = _TMP45;
        } 
        _TMP41 = _TMP43;
    } 
    _r0278.x = dot(_TMP33, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _r0278.y = dot(_TMP41, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _a0284 = _r0278 - _r0134.xy;
    _df12 = abs(_a0284);
    _TMP50 = float((_df12.y >= _df12.x));
    _res = _TMP33 + _TMP50*(_TMP41 - _TMP33);
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
