// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 gl_Vertex;
COMPAT_ATTRIBUTE vec4 gl_MultiTexCoord0;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _oTex;
    _r0007 = gl_Vertex.x*gl_ModelViewProjectionMatrix[0];
    _r0007 = _r0007 + gl_Vertex.y*gl_ModelViewProjectionMatrix[1];
    _r0007 = _r0007 + gl_Vertex.z*gl_ModelViewProjectionMatrix[2];
    _r0007 = _r0007 + gl_Vertex.w*gl_ModelViewProjectionMatrix[3];
    _oPosition1 = _r0007;
    _oTex = gl_MultiTexCoord0.xy;
    gl_Position = _r0007;
    TEX0.xy = gl_MultiTexCoord0.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
vec3 _TMP4;
float _TMP6;
float _TMP5;
float _TMP13;
float _TMP14;
vec2 _TMP2;
vec3 _TMP1;
float _TMP19;
float _TMP18;
vec2 _TMP12;
vec2 _TMP17;
vec2 _TMP9;
vec4 _TMP16;
float _TMP21;
float _TMP20;
float _TMP23;
vec2 _TMP15;
vec2 _TMP11;
vec2 _TMP10;
vec2 _TMP8;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _pos0030;
vec3 _a0032;
vec3 _b0032;
vec3 _c0032;
vec3 _TMP35;
vec2 _pos0036;
vec2 _x0038;
float _x0046;
float _x0050;
float _x0054;
vec3 _TMP55;
vec2 _pos0056;
vec2 _x0058;
float _x0066;
float _x0070;
float _x0074;
vec3 _TMP75;
vec2 _pos0076;
vec2 _x0078;
float _x0086;
float _x0090;
float _x0094;
vec2 _pos0096;
float _TMP99;
float _pos0100;
float _x0104;
float _TMP105;
float _x0110;
float _TMP111;
float _pos0112;
float _x0116;
vec3 _TMP119;
vec2 _pos0120;
vec2 _x0122;
float _x0130;
float _x0134;
float _x0138;
vec3 _TMP139;
vec2 _pos0140;
vec2 _x0142;
float _x0150;
float _x0154;
float _x0158;
vec3 _TMP159;
vec2 _pos0160;
vec2 _x0162;
float _x0170;
float _x0174;
float _x0178;
vec3 _TMP179;
vec2 _pos0180;
vec2 _x0182;
float _x0190;
float _x0194;
float _x0198;
vec3 _TMP199;
vec2 _pos0200;
vec2 _x0202;
float _x0210;
float _x0214;
float _x0218;
vec2 _pos0220;
float _TMP223;
float _pos0224;
float _x0228;
float _TMP229;
float _pos0230;
float _x0234;
float _TMP235;
float _x0240;
float _TMP241;
float _pos0242;
float _x0246;
float _TMP247;
float _pos0248;
float _x0252;
vec3 _TMP255;
vec2 _pos0256;
vec2 _x0258;
float _x0266;
float _x0270;
float _x0274;
vec3 _TMP275;
vec2 _pos0276;
vec2 _x0278;
float _x0286;
float _x0290;
float _x0294;
vec3 _TMP295;
vec2 _pos0296;
vec2 _x0298;
float _x0306;
float _x0310;
float _x0314;
vec2 _pos0316;
float _TMP319;
float _pos0320;
float _x0324;
float _TMP325;
float _x0330;
float _TMP331;
float _pos0332;
float _x0336;
vec2 _pos0340;
float _TMP343;
float _pos0344;
float _x0348;
vec2 _pos0352;
float _TMP355;
float _x0360;
vec2 _pos0364;
float _TMP367;
float _pos0368;
float _x0372;
vec3 _a0374;
vec3 _b0374;
vec3 _c0374;
vec3 _d0374;
vec3 _e0374;
vec3 _TMP377;
vec2 _pos0378;
vec2 _x0380;
float _x0388;
float _x0392;
float _x0396;
vec3 _TMP397;
vec2 _pos0398;
vec2 _x0400;
float _x0408;
float _x0412;
float _x0416;
vec3 _TMP417;
vec2 _pos0418;
vec2 _x0420;
float _x0428;
float _x0432;
float _x0436;
vec3 _TMP437;
vec2 _pos0438;
vec2 _x0440;
float _x0448;
float _x0452;
float _x0456;
vec3 _TMP457;
vec2 _pos0458;
vec2 _x0460;
float _x0468;
float _x0472;
float _x0476;
vec2 _pos0478;
float _TMP481;
float _pos0482;
float _x0486;
float _TMP487;
float _pos0488;
float _x0492;
float _TMP493;
float _x0498;
float _TMP499;
float _pos0500;
float _x0504;
float _TMP505;
float _pos0506;
float _x0510;
vec3 _TMP513;
vec2 _pos0514;
vec2 _x0516;
float _x0524;
float _x0528;
float _x0532;
vec3 _TMP533;
vec2 _pos0534;
vec2 _x0536;
float _x0544;
float _x0548;
float _x0552;
vec3 _TMP553;
vec2 _pos0554;
vec2 _x0556;
float _x0564;
float _x0568;
float _x0572;
vec3 _TMP573;
vec2 _pos0574;
vec2 _x0576;
float _x0584;
float _x0588;
float _x0592;
vec3 _TMP593;
vec2 _pos0594;
vec2 _x0596;
float _x0604;
float _x0608;
float _x0612;
vec3 _TMP613;
vec2 _pos0614;
vec2 _x0616;
float _x0624;
float _x0628;
float _x0632;
vec3 _TMP633;
vec2 _pos0634;
vec2 _x0636;
float _x0644;
float _x0648;
float _x0652;
vec2 _pos0654;
float _TMP657;
float _pos0658;
float _x0662;
float _TMP663;
float _pos0664;
float _x0668;
float _TMP669;
float _pos0670;
float _x0674;
float _TMP675;
float _x0680;
float _TMP681;
float _pos0682;
float _x0686;
float _TMP687;
float _pos0688;
float _x0692;
float _TMP693;
float _pos0694;
float _x0698;
vec3 _TMP701;
vec2 _pos0702;
vec2 _x0704;
float _x0712;
float _x0716;
float _x0720;
vec3 _TMP721;
vec2 _pos0722;
vec2 _x0724;
float _x0732;
float _x0736;
float _x0740;
vec3 _TMP741;
vec2 _pos0742;
vec2 _x0744;
float _x0752;
float _x0756;
float _x0760;
vec3 _TMP761;
vec2 _pos0762;
vec2 _x0764;
float _x0772;
float _x0776;
float _x0780;
vec3 _TMP781;
vec2 _pos0782;
vec2 _x0784;
float _x0792;
float _x0796;
float _x0800;
vec3 _TMP801;
vec2 _pos0802;
vec2 _x0804;
float _x0812;
float _x0816;
float _x0820;
vec3 _TMP821;
vec2 _pos0822;
vec2 _x0824;
float _x0832;
float _x0836;
float _x0840;
vec2 _pos0842;
float _TMP845;
float _pos0846;
float _x0850;
float _TMP851;
float _pos0852;
float _x0856;
float _TMP857;
float _pos0858;
float _x0862;
float _TMP863;
float _x0868;
float _TMP869;
float _pos0870;
float _x0874;
float _TMP875;
float _pos0876;
float _x0880;
float _TMP881;
float _pos0882;
float _x0886;
vec3 _TMP889;
vec2 _pos0890;
vec2 _x0892;
float _x0900;
float _x0904;
float _x0908;
vec3 _TMP909;
vec2 _pos0910;
vec2 _x0912;
float _x0920;
float _x0924;
float _x0928;
vec3 _TMP929;
vec2 _pos0930;
vec2 _x0932;
float _x0940;
float _x0944;
float _x0948;
vec3 _TMP949;
vec2 _pos0950;
vec2 _x0952;
float _x0960;
float _x0964;
float _x0968;
vec3 _TMP969;
vec2 _pos0970;
vec2 _x0972;
float _x0980;
float _x0984;
float _x0988;
vec3 _TMP989;
vec2 _pos0990;
vec2 _x0992;
float _x1000;
float _x1004;
float _x1008;
vec3 _TMP1009;
vec2 _pos1010;
vec2 _x1012;
float _x1020;
float _x1024;
float _x1028;
vec2 _pos1030;
float _TMP1033;
float _pos1034;
float _x1038;
float _TMP1039;
float _pos1040;
float _x1044;
float _TMP1045;
float _pos1046;
float _x1050;
float _TMP1051;
float _x1056;
float _TMP1057;
float _pos1058;
float _x1062;
float _TMP1063;
float _pos1064;
float _x1068;
float _TMP1069;
float _pos1070;
float _x1074;
vec3 _TMP1077;
vec2 _pos1078;
vec2 _x1080;
float _x1088;
float _x1092;
float _x1096;
vec3 _TMP1097;
vec2 _pos1098;
vec2 _x1100;
float _x1108;
float _x1112;
float _x1116;
vec3 _TMP1117;
vec2 _pos1118;
vec2 _x1120;
float _x1128;
float _x1132;
float _x1136;
vec3 _TMP1137;
vec2 _pos1138;
vec2 _x1140;
float _x1148;
float _x1152;
float _x1156;
vec3 _TMP1157;
vec2 _pos1158;
vec2 _x1160;
float _x1168;
float _x1172;
float _x1176;
vec2 _pos1178;
float _TMP1181;
float _pos1182;
float _x1186;
float _TMP1187;
float _pos1188;
float _x1192;
float _TMP1193;
float _x1198;
float _TMP1199;
float _pos1200;
float _x1204;
float _TMP1205;
float _pos1206;
float _x1210;
vec2 _pos1214;
float _TMP1217;
float _pos1218;
float _x1222;
vec2 _pos1226;
float _TMP1229;
float _pos1230;
float _x1234;
vec2 _pos1238;
float _TMP1241;
float _x1246;
vec2 _pos1250;
float _TMP1253;
float _pos1254;
float _x1258;
vec2 _pos1262;
float _TMP1265;
float _pos1266;
float _x1270;
vec2 _x1272;
vec3 _mask1274;
vec2 _pos1274;
vec2 _x1276;
float _TMP1277;
float _x1278;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _pos12;
    vec3 _outColor;
    _pos0030 = TEX0.xy*(TextureSize.xy/InputSize.xy);
    _pos0030 = _pos0030*2.00000000E+00 - 1.00000000E+00;
    _pos0030 = _pos0030*vec2(1.00000000E+00 + _pos0030.y*_pos0030.y*3.09999995E-02, 1.00000000E+00 + _pos0030.x*_pos0030.x*4.10000011E-02);
    _TMP0 = _pos0030*5.00000000E-01 + 5.00000000E-01;
    _pos12 = _TMP0*(InputSize.xy/TextureSize.xy);
    _x0038 = _pos12*TextureSize.xy + vec2( -1.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0038);
    _pos0036 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0036.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0046 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0046, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0050 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0050, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0054 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0054, 2.40000010E+00);
    } 
    _TMP35 = vec3(_TMP20, _TMP21, _TMP23);
    _x0058 = _pos12*TextureSize.xy + vec2( 0.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0058);
    _pos0056 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0056.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0066 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0066, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0070 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0070, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0074 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0074, 2.40000010E+00);
    } 
    _TMP55 = vec3(_TMP20, _TMP21, _TMP23);
    _x0078 = _pos12*TextureSize.xy + vec2( 1.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0078);
    _pos0076 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0076.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0086 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0086, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0090 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0090, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0094 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0094, 2.40000010E+00);
    } 
    _TMP75 = vec3(_TMP20, _TMP21, _TMP23);
    _pos0096 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0096);
    _TMP8 = -((_pos0096 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos0100 = _TMP8.x - 1.00000000E+00;
    _TMP18 = abs(_pos0100);
    _TMP19 = _TMP18*_TMP18;
    _x0104 = -3.00000000E+00*_TMP19;
    _TMP99 = exp2(_x0104);
    _TMP18 = abs(_TMP8.x);
    _TMP19 = _TMP18*_TMP18;
    _x0110 = -3.00000000E+00*_TMP19;
    _TMP105 = exp2(_x0110);
    _pos0112 = _TMP8.x + 1.00000000E+00;
    _TMP18 = abs(_pos0112);
    _TMP19 = _TMP18*_TMP18;
    _x0116 = -3.00000000E+00*_TMP19;
    _TMP111 = exp2(_x0116);
    _a0032 = (_TMP35*_TMP99 + _TMP55*_TMP105 + _TMP75*_TMP111)/(_TMP99 + _TMP105 + _TMP111);
    _x0122 = _pos12*TextureSize.xy + vec2( -2.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0122);
    _pos0120 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0120.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0130 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0130, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0134 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0134, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0138 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0138, 2.40000010E+00);
    } 
    _TMP119 = vec3(_TMP20, _TMP21, _TMP23);
    _x0142 = _pos12*TextureSize.xy + vec2( -1.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0142);
    _pos0140 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0140.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0150 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0150, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0154 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0154, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0158 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0158, 2.40000010E+00);
    } 
    _TMP139 = vec3(_TMP20, _TMP21, _TMP23);
    _x0162 = _pos12*TextureSize.xy;
    _TMP15 = floor(_x0162);
    _pos0160 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0160.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0170 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0170, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0174 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0174, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0178 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0178, 2.40000010E+00);
    } 
    _TMP159 = vec3(_TMP20, _TMP21, _TMP23);
    _x0182 = _pos12*TextureSize.xy + vec2( 1.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0182);
    _pos0180 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0180.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0190 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0190, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0194 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0194, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0198 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0198, 2.40000010E+00);
    } 
    _TMP179 = vec3(_TMP20, _TMP21, _TMP23);
    _x0202 = _pos12*TextureSize.xy + vec2( 2.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0202);
    _pos0200 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0200.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0210 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0210, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0214 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0214, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0218 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0218, 2.40000010E+00);
    } 
    _TMP199 = vec3(_TMP20, _TMP21, _TMP23);
    _pos0220 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0220);
    _TMP9 = -((_pos0220 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos0224 = _TMP9.x - 2.00000000E+00;
    _TMP18 = abs(_pos0224);
    _TMP19 = _TMP18*_TMP18;
    _x0228 = -3.00000000E+00*_TMP19;
    _TMP223 = exp2(_x0228);
    _pos0230 = _TMP9.x - 1.00000000E+00;
    _TMP18 = abs(_pos0230);
    _TMP19 = _TMP18*_TMP18;
    _x0234 = -3.00000000E+00*_TMP19;
    _TMP229 = exp2(_x0234);
    _TMP18 = abs(_TMP9.x);
    _TMP19 = _TMP18*_TMP18;
    _x0240 = -3.00000000E+00*_TMP19;
    _TMP235 = exp2(_x0240);
    _pos0242 = _TMP9.x + 1.00000000E+00;
    _TMP18 = abs(_pos0242);
    _TMP19 = _TMP18*_TMP18;
    _x0246 = -3.00000000E+00*_TMP19;
    _TMP241 = exp2(_x0246);
    _pos0248 = _TMP9.x + 2.00000000E+00;
    _TMP18 = abs(_pos0248);
    _TMP19 = _TMP18*_TMP18;
    _x0252 = -3.00000000E+00*_TMP19;
    _TMP247 = exp2(_x0252);
    _b0032 = (_TMP119*_TMP223 + _TMP139*_TMP229 + _TMP159*_TMP235 + _TMP179*_TMP241 + _TMP199*_TMP247)/(_TMP223 + _TMP229 + _TMP235 + _TMP241 + _TMP247);
    _x0258 = _pos12*TextureSize.xy + vec2( -1.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0258);
    _pos0256 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0256.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0266 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0266, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0270 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0270, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0274 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0274, 2.40000010E+00);
    } 
    _TMP255 = vec3(_TMP20, _TMP21, _TMP23);
    _x0278 = _pos12*TextureSize.xy + vec2( 0.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0278);
    _pos0276 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0276.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0286 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0286, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0290 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0290, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0294 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0294, 2.40000010E+00);
    } 
    _TMP275 = vec3(_TMP20, _TMP21, _TMP23);
    _x0298 = _pos12*TextureSize.xy + vec2( 1.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0298);
    _pos0296 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0296.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0306 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0306, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0310 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0310, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0314 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0314, 2.40000010E+00);
    } 
    _TMP295 = vec3(_TMP20, _TMP21, _TMP23);
    _pos0316 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0316);
    _TMP8 = -((_pos0316 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos0320 = _TMP8.x - 1.00000000E+00;
    _TMP18 = abs(_pos0320);
    _TMP19 = _TMP18*_TMP18;
    _x0324 = -3.00000000E+00*_TMP19;
    _TMP319 = exp2(_x0324);
    _TMP18 = abs(_TMP8.x);
    _TMP19 = _TMP18*_TMP18;
    _x0330 = -3.00000000E+00*_TMP19;
    _TMP325 = exp2(_x0330);
    _pos0332 = _TMP8.x + 1.00000000E+00;
    _TMP18 = abs(_pos0332);
    _TMP19 = _TMP18*_TMP18;
    _x0336 = -3.00000000E+00*_TMP19;
    _TMP331 = exp2(_x0336);
    _c0032 = (_TMP255*_TMP319 + _TMP275*_TMP325 + _TMP295*_TMP331)/(_TMP319 + _TMP325 + _TMP331);
    _pos0340 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0340);
    _TMP10 = -((_pos0340 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos0344 = _TMP10.y + -1.00000000E+00;
    _TMP18 = abs(_pos0344);
    _TMP19 = _TMP18*_TMP18;
    _x0348 = -8.00000000E+00*_TMP19;
    _TMP343 = exp2(_x0348);
    _pos0352 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0352);
    _TMP10 = -((_pos0352 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _TMP18 = abs(_TMP10.y);
    _TMP19 = _TMP18*_TMP18;
    _x0360 = -8.00000000E+00*_TMP19;
    _TMP355 = exp2(_x0360);
    _pos0364 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0364);
    _TMP10 = -((_pos0364 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos0368 = _TMP10.y + 1.00000000E+00;
    _TMP18 = abs(_pos0368);
    _TMP19 = _TMP18*_TMP18;
    _x0372 = -8.00000000E+00*_TMP19;
    _TMP367 = exp2(_x0372);
    _outColor = _a0032*_TMP343 + _b0032*_TMP355 + _c0032*_TMP367;
    _x0380 = _pos12*TextureSize.xy + vec2( -2.00000000E+00, -2.00000000E+00);
    _TMP15 = floor(_x0380);
    _pos0378 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0378.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0388 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0388, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0392 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0392, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0396 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0396, 2.40000010E+00);
    } 
    _TMP377 = vec3(_TMP20, _TMP21, _TMP23);
    _x0400 = _pos12*TextureSize.xy + vec2( -1.00000000E+00, -2.00000000E+00);
    _TMP15 = floor(_x0400);
    _pos0398 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0398.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0408 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0408, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0412 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0412, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0416 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0416, 2.40000010E+00);
    } 
    _TMP397 = vec3(_TMP20, _TMP21, _TMP23);
    _x0420 = _pos12*TextureSize.xy + vec2( 0.00000000E+00, -2.00000000E+00);
    _TMP15 = floor(_x0420);
    _pos0418 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0418.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0428 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0428, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0432 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0432, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0436 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0436, 2.40000010E+00);
    } 
    _TMP417 = vec3(_TMP20, _TMP21, _TMP23);
    _x0440 = _pos12*TextureSize.xy + vec2( 1.00000000E+00, -2.00000000E+00);
    _TMP15 = floor(_x0440);
    _pos0438 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0438.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0448 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0448, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0452 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0452, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0456 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0456, 2.40000010E+00);
    } 
    _TMP437 = vec3(_TMP20, _TMP21, _TMP23);
    _x0460 = _pos12*TextureSize.xy + vec2( 2.00000000E+00, -2.00000000E+00);
    _TMP15 = floor(_x0460);
    _pos0458 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0458.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0468 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0468, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0472 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0472, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0476 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0476, 2.40000010E+00);
    } 
    _TMP457 = vec3(_TMP20, _TMP21, _TMP23);
    _pos0478 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0478);
    _TMP9 = -((_pos0478 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos0482 = _TMP9.x - 2.00000000E+00;
    _TMP18 = abs(_pos0482);
    _TMP19 = _TMP18*_TMP18;
    _x0486 = -3.00000000E+00*_TMP19;
    _TMP481 = exp2(_x0486);
    _pos0488 = _TMP9.x - 1.00000000E+00;
    _TMP18 = abs(_pos0488);
    _TMP19 = _TMP18*_TMP18;
    _x0492 = -3.00000000E+00*_TMP19;
    _TMP487 = exp2(_x0492);
    _TMP18 = abs(_TMP9.x);
    _TMP19 = _TMP18*_TMP18;
    _x0498 = -3.00000000E+00*_TMP19;
    _TMP493 = exp2(_x0498);
    _pos0500 = _TMP9.x + 1.00000000E+00;
    _TMP18 = abs(_pos0500);
    _TMP19 = _TMP18*_TMP18;
    _x0504 = -3.00000000E+00*_TMP19;
    _TMP499 = exp2(_x0504);
    _pos0506 = _TMP9.x + 2.00000000E+00;
    _TMP18 = abs(_pos0506);
    _TMP19 = _TMP18*_TMP18;
    _x0510 = -3.00000000E+00*_TMP19;
    _TMP505 = exp2(_x0510);
    _a0374 = (_TMP377*_TMP481 + _TMP397*_TMP487 + _TMP417*_TMP493 + _TMP437*_TMP499 + _TMP457*_TMP505)/(_TMP481 + _TMP487 + _TMP493 + _TMP499 + _TMP505);
    _x0516 = _pos12*TextureSize.xy + vec2( -3.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0516);
    _pos0514 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0514.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0524 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0524, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0528 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0528, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0532 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0532, 2.40000010E+00);
    } 
    _TMP513 = vec3(_TMP20, _TMP21, _TMP23);
    _x0536 = _pos12*TextureSize.xy + vec2( -2.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0536);
    _pos0534 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0534.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0544 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0544, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0548 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0548, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0552 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0552, 2.40000010E+00);
    } 
    _TMP533 = vec3(_TMP20, _TMP21, _TMP23);
    _x0556 = _pos12*TextureSize.xy + vec2( -1.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0556);
    _pos0554 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0554.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0564 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0564, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0568 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0568, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0572 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0572, 2.40000010E+00);
    } 
    _TMP553 = vec3(_TMP20, _TMP21, _TMP23);
    _x0576 = _pos12*TextureSize.xy + vec2( 0.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0576);
    _pos0574 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0574.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0584 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0584, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0588 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0588, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0592 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0592, 2.40000010E+00);
    } 
    _TMP573 = vec3(_TMP20, _TMP21, _TMP23);
    _x0596 = _pos12*TextureSize.xy + vec2( 1.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0596);
    _pos0594 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0594.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0604 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0604, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0608 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0608, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0612 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0612, 2.40000010E+00);
    } 
    _TMP593 = vec3(_TMP20, _TMP21, _TMP23);
    _x0616 = _pos12*TextureSize.xy + vec2( 2.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0616);
    _pos0614 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0614.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0624 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0624, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0628 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0628, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0632 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0632, 2.40000010E+00);
    } 
    _TMP613 = vec3(_TMP20, _TMP21, _TMP23);
    _x0636 = _pos12*TextureSize.xy + vec2( 3.00000000E+00, -1.00000000E+00);
    _TMP15 = floor(_x0636);
    _pos0634 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0634.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0644 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0644, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0648 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0648, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0652 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0652, 2.40000010E+00);
    } 
    _TMP633 = vec3(_TMP20, _TMP21, _TMP23);
    _pos0654 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0654);
    _TMP11 = -((_pos0654 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos0658 = _TMP11.x - 3.00000000E+00;
    _TMP18 = abs(_pos0658);
    _TMP19 = _TMP18*_TMP18;
    _x0662 = -1.50000000E+00*_TMP19;
    _TMP657 = exp2(_x0662);
    _pos0664 = _TMP11.x - 2.00000000E+00;
    _TMP18 = abs(_pos0664);
    _TMP19 = _TMP18*_TMP18;
    _x0668 = -1.50000000E+00*_TMP19;
    _TMP663 = exp2(_x0668);
    _pos0670 = _TMP11.x - 1.00000000E+00;
    _TMP18 = abs(_pos0670);
    _TMP19 = _TMP18*_TMP18;
    _x0674 = -1.50000000E+00*_TMP19;
    _TMP669 = exp2(_x0674);
    _TMP18 = abs(_TMP11.x);
    _TMP19 = _TMP18*_TMP18;
    _x0680 = -1.50000000E+00*_TMP19;
    _TMP675 = exp2(_x0680);
    _pos0682 = _TMP11.x + 1.00000000E+00;
    _TMP18 = abs(_pos0682);
    _TMP19 = _TMP18*_TMP18;
    _x0686 = -1.50000000E+00*_TMP19;
    _TMP681 = exp2(_x0686);
    _pos0688 = _TMP11.x + 2.00000000E+00;
    _TMP18 = abs(_pos0688);
    _TMP19 = _TMP18*_TMP18;
    _x0692 = -1.50000000E+00*_TMP19;
    _TMP687 = exp2(_x0692);
    _pos0694 = _TMP11.x + 3.00000000E+00;
    _TMP18 = abs(_pos0694);
    _TMP19 = _TMP18*_TMP18;
    _x0698 = -1.50000000E+00*_TMP19;
    _TMP693 = exp2(_x0698);
    _b0374 = (_TMP513*_TMP657 + _TMP533*_TMP663 + _TMP553*_TMP669 + _TMP573*_TMP675 + _TMP593*_TMP681 + _TMP613*_TMP687 + _TMP633*_TMP693)/(_TMP657 + _TMP663 + _TMP669 + _TMP675 + _TMP681 + _TMP687 + _TMP693);
    _x0704 = _pos12*TextureSize.xy + vec2( -3.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0704);
    _pos0702 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0702.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0712 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0712, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0716 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0716, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0720 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0720, 2.40000010E+00);
    } 
    _TMP701 = vec3(_TMP20, _TMP21, _TMP23);
    _x0724 = _pos12*TextureSize.xy + vec2( -2.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0724);
    _pos0722 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0722.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0732 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0732, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0736 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0736, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0740 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0740, 2.40000010E+00);
    } 
    _TMP721 = vec3(_TMP20, _TMP21, _TMP23);
    _x0744 = _pos12*TextureSize.xy + vec2( -1.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0744);
    _pos0742 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0742.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0752 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0752, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0756 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0756, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0760 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0760, 2.40000010E+00);
    } 
    _TMP741 = vec3(_TMP20, _TMP21, _TMP23);
    _x0764 = _pos12*TextureSize.xy;
    _TMP15 = floor(_x0764);
    _pos0762 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0762.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0772 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0772, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0776 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0776, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0780 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0780, 2.40000010E+00);
    } 
    _TMP761 = vec3(_TMP20, _TMP21, _TMP23);
    _x0784 = _pos12*TextureSize.xy + vec2( 1.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0784);
    _pos0782 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0782.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0792 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0792, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0796 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0796, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0800 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0800, 2.40000010E+00);
    } 
    _TMP781 = vec3(_TMP20, _TMP21, _TMP23);
    _x0804 = _pos12*TextureSize.xy + vec2( 2.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0804);
    _pos0802 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0802.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0812 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0812, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0816 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0816, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0820 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0820, 2.40000010E+00);
    } 
    _TMP801 = vec3(_TMP20, _TMP21, _TMP23);
    _x0824 = _pos12*TextureSize.xy + vec2( 3.00000000E+00, 0.00000000E+00);
    _TMP15 = floor(_x0824);
    _pos0822 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0822.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0832 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0832, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0836 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0836, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0840 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0840, 2.40000010E+00);
    } 
    _TMP821 = vec3(_TMP20, _TMP21, _TMP23);
    _pos0842 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos0842);
    _TMP11 = -((_pos0842 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos0846 = _TMP11.x - 3.00000000E+00;
    _TMP18 = abs(_pos0846);
    _TMP19 = _TMP18*_TMP18;
    _x0850 = -1.50000000E+00*_TMP19;
    _TMP845 = exp2(_x0850);
    _pos0852 = _TMP11.x - 2.00000000E+00;
    _TMP18 = abs(_pos0852);
    _TMP19 = _TMP18*_TMP18;
    _x0856 = -1.50000000E+00*_TMP19;
    _TMP851 = exp2(_x0856);
    _pos0858 = _TMP11.x - 1.00000000E+00;
    _TMP18 = abs(_pos0858);
    _TMP19 = _TMP18*_TMP18;
    _x0862 = -1.50000000E+00*_TMP19;
    _TMP857 = exp2(_x0862);
    _TMP18 = abs(_TMP11.x);
    _TMP19 = _TMP18*_TMP18;
    _x0868 = -1.50000000E+00*_TMP19;
    _TMP863 = exp2(_x0868);
    _pos0870 = _TMP11.x + 1.00000000E+00;
    _TMP18 = abs(_pos0870);
    _TMP19 = _TMP18*_TMP18;
    _x0874 = -1.50000000E+00*_TMP19;
    _TMP869 = exp2(_x0874);
    _pos0876 = _TMP11.x + 2.00000000E+00;
    _TMP18 = abs(_pos0876);
    _TMP19 = _TMP18*_TMP18;
    _x0880 = -1.50000000E+00*_TMP19;
    _TMP875 = exp2(_x0880);
    _pos0882 = _TMP11.x + 3.00000000E+00;
    _TMP18 = abs(_pos0882);
    _TMP19 = _TMP18*_TMP18;
    _x0886 = -1.50000000E+00*_TMP19;
    _TMP881 = exp2(_x0886);
    _c0374 = (_TMP701*_TMP845 + _TMP721*_TMP851 + _TMP741*_TMP857 + _TMP761*_TMP863 + _TMP781*_TMP869 + _TMP801*_TMP875 + _TMP821*_TMP881)/(_TMP845 + _TMP851 + _TMP857 + _TMP863 + _TMP869 + _TMP875 + _TMP881);
    _x0892 = _pos12*TextureSize.xy + vec2( -3.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0892);
    _pos0890 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0890.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0900 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0900, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0904 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0904, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0908 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0908, 2.40000010E+00);
    } 
    _TMP889 = vec3(_TMP20, _TMP21, _TMP23);
    _x0912 = _pos12*TextureSize.xy + vec2( -2.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0912);
    _pos0910 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0910.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0920 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0920, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0924 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0924, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0928 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0928, 2.40000010E+00);
    } 
    _TMP909 = vec3(_TMP20, _TMP21, _TMP23);
    _x0932 = _pos12*TextureSize.xy + vec2( -1.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0932);
    _pos0930 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0930.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0940 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0940, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0944 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0944, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0948 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0948, 2.40000010E+00);
    } 
    _TMP929 = vec3(_TMP20, _TMP21, _TMP23);
    _x0952 = _pos12*TextureSize.xy + vec2( 0.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0952);
    _pos0950 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0950.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0960 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0960, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0964 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0964, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0968 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0968, 2.40000010E+00);
    } 
    _TMP949 = vec3(_TMP20, _TMP21, _TMP23);
    _x0972 = _pos12*TextureSize.xy + vec2( 1.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0972);
    _pos0970 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0970.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x0980 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0980, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x0984 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0984, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x0988 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x0988, 2.40000010E+00);
    } 
    _TMP969 = vec3(_TMP20, _TMP21, _TMP23);
    _x0992 = _pos12*TextureSize.xy + vec2( 2.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x0992);
    _pos0990 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos0990.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x1000 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1000, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x1004 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1004, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x1008 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1008, 2.40000010E+00);
    } 
    _TMP989 = vec3(_TMP20, _TMP21, _TMP23);
    _x1012 = _pos12*TextureSize.xy + vec2( 3.00000000E+00, 1.00000000E+00);
    _TMP15 = floor(_x1012);
    _pos1010 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos1010.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x1020 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1020, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x1024 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1024, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x1028 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1028, 2.40000010E+00);
    } 
    _TMP1009 = vec3(_TMP20, _TMP21, _TMP23);
    _pos1030 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos1030);
    _TMP11 = -((_pos1030 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos1034 = _TMP11.x - 3.00000000E+00;
    _TMP18 = abs(_pos1034);
    _TMP19 = _TMP18*_TMP18;
    _x1038 = -1.50000000E+00*_TMP19;
    _TMP1033 = exp2(_x1038);
    _pos1040 = _TMP11.x - 2.00000000E+00;
    _TMP18 = abs(_pos1040);
    _TMP19 = _TMP18*_TMP18;
    _x1044 = -1.50000000E+00*_TMP19;
    _TMP1039 = exp2(_x1044);
    _pos1046 = _TMP11.x - 1.00000000E+00;
    _TMP18 = abs(_pos1046);
    _TMP19 = _TMP18*_TMP18;
    _x1050 = -1.50000000E+00*_TMP19;
    _TMP1045 = exp2(_x1050);
    _TMP18 = abs(_TMP11.x);
    _TMP19 = _TMP18*_TMP18;
    _x1056 = -1.50000000E+00*_TMP19;
    _TMP1051 = exp2(_x1056);
    _pos1058 = _TMP11.x + 1.00000000E+00;
    _TMP18 = abs(_pos1058);
    _TMP19 = _TMP18*_TMP18;
    _x1062 = -1.50000000E+00*_TMP19;
    _TMP1057 = exp2(_x1062);
    _pos1064 = _TMP11.x + 2.00000000E+00;
    _TMP18 = abs(_pos1064);
    _TMP19 = _TMP18*_TMP18;
    _x1068 = -1.50000000E+00*_TMP19;
    _TMP1063 = exp2(_x1068);
    _pos1070 = _TMP11.x + 3.00000000E+00;
    _TMP18 = abs(_pos1070);
    _TMP19 = _TMP18*_TMP18;
    _x1074 = -1.50000000E+00*_TMP19;
    _TMP1069 = exp2(_x1074);
    _d0374 = (_TMP889*_TMP1033 + _TMP909*_TMP1039 + _TMP929*_TMP1045 + _TMP949*_TMP1051 + _TMP969*_TMP1057 + _TMP989*_TMP1063 + _TMP1009*_TMP1069)/(_TMP1033 + _TMP1039 + _TMP1045 + _TMP1051 + _TMP1057 + _TMP1063 + _TMP1069);
    _x1080 = _pos12*TextureSize.xy + vec2( -2.00000000E+00, 2.00000000E+00);
    _TMP15 = floor(_x1080);
    _pos1078 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos1078.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x1088 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1088, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x1092 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1092, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x1096 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1096, 2.40000010E+00);
    } 
    _TMP1077 = vec3(_TMP20, _TMP21, _TMP23);
    _x1100 = _pos12*TextureSize.xy + vec2( -1.00000000E+00, 2.00000000E+00);
    _TMP15 = floor(_x1100);
    _pos1098 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos1098.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x1108 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1108, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x1112 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1112, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x1116 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1116, 2.40000010E+00);
    } 
    _TMP1097 = vec3(_TMP20, _TMP21, _TMP23);
    _x1120 = _pos12*TextureSize.xy + vec2( 0.00000000E+00, 2.00000000E+00);
    _TMP15 = floor(_x1120);
    _pos1118 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos1118.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x1128 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1128, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x1132 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1132, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x1136 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1136, 2.40000010E+00);
    } 
    _TMP1117 = vec3(_TMP20, _TMP21, _TMP23);
    _x1140 = _pos12*TextureSize.xy + vec2( 1.00000000E+00, 2.00000000E+00);
    _TMP15 = floor(_x1140);
    _pos1138 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos1138.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x1148 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1148, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x1152 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1152, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x1156 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1156, 2.40000010E+00);
    } 
    _TMP1137 = vec3(_TMP20, _TMP21, _TMP23);
    _x1160 = _pos12*TextureSize.xy + vec2( 2.00000000E+00, 2.00000000E+00);
    _TMP15 = floor(_x1160);
    _pos1158 = (_TMP15 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _pos1158.xy);
    if (_TMP16.x <= 4.04499993E-02) { 
        _TMP23 = _TMP16.x/1.29200001E+01;
    } else {
        _x1168 = (_TMP16.x + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1168, 2.40000010E+00);
    } 
    _TMP20 = _TMP23;
    if (_TMP16.y <= 4.04499993E-02) { 
        _TMP23 = _TMP16.y/1.29200001E+01;
    } else {
        _x1172 = (_TMP16.y + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1172, 2.40000010E+00);
    } 
    _TMP21 = _TMP23;
    if (_TMP16.z <= 4.04499993E-02) { 
        _TMP23 = _TMP16.z/1.29200001E+01;
    } else {
        _x1176 = (_TMP16.z + 5.49999997E-02)/1.05499995E+00;
        _TMP23 = pow(_x1176, 2.40000010E+00);
    } 
    _TMP1157 = vec3(_TMP20, _TMP21, _TMP23);
    _pos1178 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos1178);
    _TMP9 = -((_pos1178 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos1182 = _TMP9.x - 2.00000000E+00;
    _TMP18 = abs(_pos1182);
    _TMP19 = _TMP18*_TMP18;
    _x1186 = -3.00000000E+00*_TMP19;
    _TMP1181 = exp2(_x1186);
    _pos1188 = _TMP9.x - 1.00000000E+00;
    _TMP18 = abs(_pos1188);
    _TMP19 = _TMP18*_TMP18;
    _x1192 = -3.00000000E+00*_TMP19;
    _TMP1187 = exp2(_x1192);
    _TMP18 = abs(_TMP9.x);
    _TMP19 = _TMP18*_TMP18;
    _x1198 = -3.00000000E+00*_TMP19;
    _TMP1193 = exp2(_x1198);
    _pos1200 = _TMP9.x + 1.00000000E+00;
    _TMP18 = abs(_pos1200);
    _TMP19 = _TMP18*_TMP18;
    _x1204 = -3.00000000E+00*_TMP19;
    _TMP1199 = exp2(_x1204);
    _pos1206 = _TMP9.x + 2.00000000E+00;
    _TMP18 = abs(_pos1206);
    _TMP19 = _TMP18*_TMP18;
    _x1210 = -3.00000000E+00*_TMP19;
    _TMP1205 = exp2(_x1210);
    _e0374 = (_TMP1077*_TMP1181 + _TMP1097*_TMP1187 + _TMP1117*_TMP1193 + _TMP1137*_TMP1199 + _TMP1157*_TMP1205)/(_TMP1181 + _TMP1187 + _TMP1193 + _TMP1199 + _TMP1205);
    _pos1214 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos1214);
    _TMP12 = -((_pos1214 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos1218 = _TMP12.y + -2.00000000E+00;
    _TMP18 = abs(_pos1218);
    _TMP19 = _TMP18*_TMP18;
    _x1222 = -2.00000000E+00*_TMP19;
    _TMP1217 = exp2(_x1222);
    _pos1226 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos1226);
    _TMP12 = -((_pos1226 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos1230 = _TMP12.y + -1.00000000E+00;
    _TMP18 = abs(_pos1230);
    _TMP19 = _TMP18*_TMP18;
    _x1234 = -2.00000000E+00*_TMP19;
    _TMP1229 = exp2(_x1234);
    _pos1238 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos1238);
    _TMP12 = -((_pos1238 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _TMP18 = abs(_TMP12.y);
    _TMP19 = _TMP18*_TMP18;
    _x1246 = -2.00000000E+00*_TMP19;
    _TMP1241 = exp2(_x1246);
    _pos1250 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos1250);
    _TMP12 = -((_pos1250 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos1254 = _TMP12.y + 1.00000000E+00;
    _TMP18 = abs(_pos1254);
    _TMP19 = _TMP18*_TMP18;
    _x1258 = -2.00000000E+00*_TMP19;
    _TMP1253 = exp2(_x1258);
    _pos1262 = _pos12*TextureSize.xy;
    _TMP17 = floor(_pos1262);
    _TMP12 = -((_pos1262 - _TMP17) - vec2( 5.00000000E-01, 5.00000000E-01));
    _pos1266 = _TMP12.y + 2.00000000E+00;
    _TMP18 = abs(_pos1266);
    _TMP19 = _TMP18*_TMP18;
    _x1270 = -2.00000000E+00*_TMP19;
    _TMP1265 = exp2(_x1270);
    _TMP1 = _a0374*_TMP1217 + _b0374*_TMP1229 + _c0374*_TMP1241 + _d0374*_TMP1253 + _e0374*_TMP1265;
    _outColor.xyz = _outColor.xyz + _TMP1/1.60000000E+01;
    _x1272 = TEX0.xy*(TextureSize.xy/InputSize.xy)*OutputSize.xy;
    _TMP2 = floor(_x1272);
    _pos1274 = _TMP2 + vec2( 5.00000000E-01, 5.00000000E-01);
    _mask1274 = vec3( 5.00000000E-01, 5.00000000E-01, 5.00000000E-01);
    _x1276 = _pos1274.xy*vec2( 1.00000000E+00, 5.00000000E-01);
    _pos1274.xy = floor(_x1276);
    _pos1274.x = _pos1274.x + _pos1274.y*3.00000000E+00;
    _x1278 = _pos1274.x/6.00000000E+00;
    _TMP1277 = fract(_x1278);
    if (_TMP1277 < 3.33000004E-01) { 
        _mask1274.x = 1.50000000E+00;
    } else {
        if (_TMP1277 < 6.66000009E-01) { 
            _mask1274.y = 1.50000000E+00;
        } else {
            _mask1274.z = 1.50000000E+00;
        } 
    } 
    _outColor.xyz = _outColor.xyz*_mask1274;
    if (_outColor.x < 3.13080009E-03) { 
        _TMP13 = _outColor.x*1.29200001E+01;
    } else {
        _TMP14 = pow(_outColor.x, 4.16660011E-01);
        _TMP13 = 1.05499995E+00*_TMP14 - 5.49999997E-02;
    } 
    _TMP5 = _TMP13;
    if (_outColor.y < 3.13080009E-03) { 
        _TMP13 = _outColor.y*1.29200001E+01;
    } else {
        _TMP14 = pow(_outColor.y, 4.16660011E-01);
        _TMP13 = 1.05499995E+00*_TMP14 - 5.49999997E-02;
    } 
    _TMP6 = _TMP13;
    if (_outColor.z < 3.13080009E-03) { 
        _TMP13 = _outColor.z*1.29200001E+01;
    } else {
        _TMP14 = pow(_outColor.z, 4.16660011E-01);
        _TMP13 = 1.05499995E+00*_TMP14 - 5.49999997E-02;
    } 
    _TMP4 = vec3(_TMP5, _TMP6, _TMP13);
    _ret_0 = vec4(_TMP4.x, _TMP4.y, _TMP4.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
