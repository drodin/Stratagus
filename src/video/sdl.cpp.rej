diff a/src/video/sdl.cpp b/src/video/sdl.cpp	(rejected hunks)
@@ -461,12 +464,9 @@ void InitVideoSdl()
	if (SDL_WasInit(SDL_INIT_VIDEO) == 0) {
 #ifndef USE_WIN32
		// Fix tablet input in full-screen mode
-		SDL_putenv(strdup("SDL_MOUSE_RELATIVE=0"));
+		SDL_setenv("SDL_MOUSE_RELATIVE", "0", 1);
 #endif
		int res = SDL_Init(
-#ifdef DEBUG
-					  SDL_INIT_NOPARACHUTE |
-#endif
					  SDL_INIT_AUDIO | SDL_INIT_VIDEO |
					  SDL_INIT_TIMER);
		if (res < 0) {
@@ -487,75 +487,6 @@ void InitVideoSdl()
		signal(SIGSEGV, CleanExit);
		signal(SIGABRT, CleanExit);
 #endif
-		// Set WindowManager Title
-		if (!FullGameName.empty()) {
-			SDL_WM_SetCaption(FullGameName.c_str(), FullGameName.c_str());
-		} else if (!Parameters::Instance.applicationName.empty()) {
-			SDL_WM_SetCaption(Parameters::Instance.applicationName.c_str(), Parameters::Instance.applicationName.c_str());
-		} else {
-			SDL_WM_SetCaption("Stratagus", "Stratagus");
-		}
-
-#if ! defined(USE_WIN32) && ! defined(USE_MAEMO)
-
-#if defined(USE_OPENGL) || defined(USE_GLES)
-		// Make sure, that we not create OpenGL textures (and do not call OpenGL functions), when creating icon surface
-		bool UseOpenGL_orig = UseOpenGL;
-		UseOpenGL = false;
-#endif
-
-		SDL_Surface *icon = NULL;
-		CGraphic *g = NULL;
-		struct stat st;
-
-		std::string FullGameNameL = FullGameName;
-		for (size_t i = 0; i < FullGameNameL.size(); ++i) {
-			FullGameNameL[i] = tolower(FullGameNameL[i]);
-		}
-
-		std::string ApplicationName = Parameters::Instance.applicationName;
-		std::string ApplicationNameL = ApplicationName;
-		for (size_t i = 0; i < ApplicationNameL.size(); ++i) {
-			ApplicationNameL[i] = tolower(ApplicationNameL[i]);
-		}
-
-		std::vector <std::string> pixmaps;
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + FullGameName + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + FullGameNameL + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + FullGameName + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + FullGameNameL + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + ApplicationName + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + ApplicationNameL + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + ApplicationName + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + ApplicationNameL + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + "Stratagus" + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + "stratagus" + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + "Stratagus" + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + "stratagus" + ".png");
-
-		for (size_t i = 0; i < pixmaps.size(); ++i) {
-			if (stat(pixmaps[i].c_str(), &st) == 0) {
-				if (g) { CGraphic::Free(g); }
-				g = CGraphic::New(pixmaps[i].c_str());
-				g->Load();
-				icon = g->Surface;
-				if (icon) { break; }
-			}
-		}
-
-		if (icon) {
-			SDL_WM_SetIcon(icon, 0);
-		}
-
-		if (g) {
-			CGraphic::Free(g);
-		}
-
-#if defined(USE_OPENGL) || defined(USE_GLES)
-		UseOpenGL = UseOpenGL_orig;
-#endif
-
-#endif
 #ifdef USE_WIN32
		HWND hwnd = NULL;
		HICON hicon = NULL;
@@ -587,13 +518,13 @@ void InitVideoSdl()
 #endif

 #if !defined(USE_OPENGL) && !defined(USE_GLES)
-	flags = SDL_HWSURFACE | SDL_HWPALETTE;
+	flags = 0;
 #endif

	// Sam said: better for windows.
	/* SDL_HWSURFACE|SDL_HWPALETTE | */
	if (Video.FullScreen) {
-		flags |= SDL_FULLSCREEN;
+		flags |= SDL_WINDOW_FULLSCREEN_DESKTOP;
	}

 #if defined(USE_OPENGL) || defined(USE_GLES)
@@ -627,31 +560,104 @@ void InitVideoSdl()
		Video.Depth = 32;
	}

+	const char *win_title = "Stratagus";
+	// Set WindowManager Title
+	if (!FullGameName.empty()) {
+		win_title = FullGameName.c_str();
+	} else if (!Parameters::Instance.applicationName.empty()) {
+		win_title = Parameters::Instance.applicationName.c_str();
+	}
+
 #if defined(USE_OPENGL) || defined(USE_GLES)
	if (!Video.ViewportWidth || !Video.ViewportHeight) {
		Video.ViewportWidth = Video.Width;
		Video.ViewportHeight = Video.Height;
	}
-	TheScreen = SDL_SetVideoMode(Video.ViewportWidth, Video.ViewportHeight, Video.Depth, flags);
-#else
-	TheScreen = SDL_SetVideoMode(Video.Width, Video.Height, Video.Depth, flags);
-#endif
-	if (TheScreen && (TheScreen->format->BitsPerPixel != 16
-					  && TheScreen->format->BitsPerPixel != 32)) {
-		// Only support 16 and 32 bpp, default to 16
-#if defined(USE_OPENGL) || defined(USE_GLES)
-		TheScreen = SDL_SetVideoMode(Video.ViewportWidth, Video.ViewportHeight, 16, flags);
+	TheWindow = SDL_CreateWindow(win_title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+	                             Video.ViewportWidth, Video.ViewportHeight, flags);
 #else
-		TheScreen = SDL_SetVideoMode(Video.Width, Video.Height, 16, flags);
+	TheWindow = SDL_CreateWindow(win_title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+	                             Video.ViewportWidth, Video.ViewportHeight, flags);
 #endif
-	}
-	if (TheScreen == NULL) {
+	if (TheWindow == NULL) {
		fprintf(stderr, "Couldn't set %dx%dx%d video mode: %s\n",
				Video.Width, Video.Height, Video.Depth, SDL_GetError());
		exit(1);
	}
+	if (!TheRenderer) TheRenderer = SDL_CreateRenderer(TheWindow, -1, 0);
+	SDL_RenderSetLogicalSize(TheRenderer, Video.Width, Video.Height);
+	SDL_SetRenderDrawColor(TheRenderer, 0, 0, 0, 255);
+	TheScreen = SDL_CreateRGBSurface(0, Video.Width, Video.Height, 32,
+	                                 0x00FF0000,
+	                                 0x0000FF00,
+	                                 0x000000FF,
+	                                 0); //0xFF000000);
+	TheTexture = SDL_CreateTexture(TheRenderer,
+	                               SDL_PIXELFORMAT_ARGB8888,
+	                               SDL_TEXTUREACCESS_STREAMING,
+	                               Video.Width, Video.Height);

-	Video.FullScreen = (TheScreen->flags & SDL_FULLSCREEN) ? 1 : 0;
+#if ! defined(USE_WIN32) && ! defined(USE_MAEMO)
+
+#if defined(USE_OPENGL) || defined(USE_GLES)
+		// Make sure, that we not create OpenGL textures (and do not call OpenGL functions), when creating icon surface
+		bool UseOpenGL_orig = UseOpenGL;
+		UseOpenGL = false;
+#endif
+
+		SDL_Surface *icon = NULL;
+		CGraphic *g = NULL;
+		struct stat st;
+
+		std::string FullGameNameL = FullGameName;
+		for (size_t i = 0; i < FullGameNameL.size(); ++i) {
+			FullGameNameL[i] = tolower(FullGameNameL[i]);
+		}
+
+		std::string ApplicationName = Parameters::Instance.applicationName;
+		std::string ApplicationNameL = ApplicationName;
+		for (size_t i = 0; i < ApplicationNameL.size(); ++i) {
+			ApplicationNameL[i] = tolower(ApplicationNameL[i]);
+		}
+
+		std::vector <std::string> pixmaps;
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + FullGameName + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + FullGameNameL + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + FullGameName + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + FullGameNameL + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + ApplicationName + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + ApplicationNameL + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + ApplicationName + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + ApplicationNameL + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + "Stratagus" + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + "stratagus" + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + "Stratagus" + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + "stratagus" + ".png");
+
+		for (size_t i = 0; i < pixmaps.size(); ++i) {
+			if (stat(pixmaps[i].c_str(), &st) == 0) {
+				if (g) { CGraphic::Free(g); }
+				g = CGraphic::New(pixmaps[i].c_str());
+				g->Load();
+				icon = g->Surface;
+				if (icon) { break; }
+			}
+		}
+
+		if (icon) {
+			SDL_SetWindowIcon(TheWindow, icon);
+		}
+
+		if (g) {
+			CGraphic::Free(g);
+		}
+
+#if defined(USE_OPENGL) || defined(USE_GLES)
+		UseOpenGL = UseOpenGL_orig;
+#endif
+
+#endif
+	Video.FullScreen = (SDL_GetWindowFlags(TheWindow) & SDL_WINDOW_FULLSCREEN_DESKTOP) ? 1 : 0;
	Video.Depth = TheScreen->format->BitsPerPixel;

 #if defined(USE_TOUCHSCREEN) && defined(USE_WIN32)
@@ -666,9 +672,6 @@ void InitVideoSdl()
	SDL_ShowCursor(SDL_DISABLE);
 #endif

-	// Make default character translation easier
-	SDL_EnableUNICODE(1);
-
 #if defined(USE_OPENGL) || defined(USE_GLES)
	if (UseOpenGL) {
 #ifdef USE_GLES_MAEMO
@@ -767,7 +770,8 @@ int VideoValidResolution(int w, int h)
		return 0;
	}
 #endif
-	return SDL_VideoModeOK(w, h, TheScreen->format->BitsPerPixel, TheScreen->flags);
+	//return SDL_VideoModeOK(w, h, TheScreen->format->BitsPerPixel, TheScreen->flags);
+	return 1;
 }

 /**
@@ -846,46 +850,57 @@ static void SdlDoEvent(const EventCallba
				int yw = UI.MouseWarpPos.y;
				UI.MouseWarpPos.x = -1;
				UI.MouseWarpPos.y = -1;
-				SDL_WarpMouse(xw, yw);
+				SDL_WarpMouseInWindow(TheWindow, xw, yw);
			}
			break;

-		case SDL_ACTIVEEVENT:
-			if (event.active.state & SDL_APPMOUSEFOCUS) {
-				static bool InMainWindow = true;
+		case SDL_WINDOWEVENT:
+			switch (event.window.event) {
+				case SDL_WINDOWEVENT_ENTER:
+				case SDL_WINDOWEVENT_LEAVE:
+				{
+					static bool InMainWindow = true;

-				if (InMainWindow && !event.active.gain) {
-					InputMouseExit(callbacks, SDL_GetTicks());
+					if (InMainWindow && (event.window.event == SDL_WINDOWEVENT_LEAVE)) {
+						InputMouseExit(callbacks, SDL_GetTicks());
+					}
+					InMainWindow = (event.window.event == SDL_WINDOWEVENT_ENTER);
				}
-				InMainWindow = (event.active.gain != 0);
-			}
-			if (!IsNetworkGame() && Preference.PauseOnLeave && (event.active.state & SDL_APPACTIVE || SDL_GetAppState() & SDL_APPACTIVE)) {
-				static bool DoTogglePause = false;
+				break;

-				if (IsSDLWindowVisible && !event.active.gain) {
-					IsSDLWindowVisible = false;
-					if (!GamePaused) {
-						DoTogglePause = true;
-						UiTogglePause();
-					}
-				} else if (!IsSDLWindowVisible && event.active.gain) {
-					IsSDLWindowVisible = true;
-					if (GamePaused && DoTogglePause) {
-						DoTogglePause = false;
-						UiTogglePause();
+				case SDL_WINDOWEVENT_FOCUS_GAINED:
+				case SDL_WINDOWEVENT_FOCUS_LOST:
+				{
+				if (!IsNetworkGame() && Preference.PauseOnLeave /*(SDL_GetWindowFlags(TheWindow) & SDL_WINDOW_INPUT_FOCUS)*/) {
+					static bool DoTogglePause = false;
+
+					if (IsSDLWindowVisible && (event.window.event == SDL_WINDOWEVENT_FOCUS_LOST)) {
+						IsSDLWindowVisible = false;
+						if (!GamePaused) {
+							DoTogglePause = true;
+							UiTogglePause();
+						}
+					} else if (!IsSDLWindowVisible && (event.window.event == SDL_WINDOWEVENT_FOCUS_GAINED)) {
+						IsSDLWindowVisible = true;
+						if (GamePaused && DoTogglePause) {
+							DoTogglePause = false;
+							UiTogglePause();
+						}
					}
				}
+				}
+				break;
			}
			break;

		case SDL_KEYDOWN:
			InputKeyButtonPress(callbacks, SDL_GetTicks(),
-								event.key.keysym.sym, event.key.keysym.unicode);
+								event.key.keysym.sym, event.key.keysym.sym < 128 ? event.key.keysym.sym : 0);
			break;

		case SDL_KEYUP:
			InputKeyButtonRelease(callbacks, SDL_GetTicks(),
-								  event.key.keysym.sym, event.key.keysym.unicode);
+								  event.key.keysym.sym, event.key.keysym.sym < 128 ? event.key.keysym.sym : 0);
			break;

		case SDL_QUIT:
@@ -999,14 +1014,20 @@ void RealizeVideoMemory()
		eglSwapBuffers(eglDisplay, eglSurface);
 #endif
 #if defined(USE_OPENGL) || defined(USE_GLES_NATIVE)
-		SDL_GL_SwapBuffers();
+		SDL_GL_SwapWindow(TheWindow);
 #endif
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	} else
 #endif
	{
		if (NumRects) {
-			SDL_UpdateRects(TheScreen, NumRects, Rects);
+			//SDL_UpdateWindowSurfaceRects(TheWindow, Rects, NumRects);
+			SDL_UpdateTexture(TheTexture, NULL, TheScreen->pixels, TheScreen->pitch);
+			//SDL_RenderClear(TheRenderer);
+			//for (int i = 0; i < NumRects; i++)
+			//    SDL_UpdateTexture(TheTexture, &Rects[i], TheScreen->pixels, TheScreen->pitch);
+			SDL_RenderCopy(TheRenderer, TheTexture, NULL, NULL);
+			SDL_RenderPresent(TheRenderer);
			NumRects = 0;
		}
	}
@@ -1106,72 +1127,17 @@ void ToggleFullScreen()
	// On Maemo is only supported fullscreen mode
	return;
 #endif
-#ifdef USE_WIN32
-	long framesize;
-	SDL_Rect clip;
	Uint32 flags;
-	int w;
-	int h;
-	int bpp;
-	unsigned char *pixels = NULL;
-	SDL_Color *palette = NULL;
-	int ncolors = 0;

-	if (!TheScreen) { // don't bother if there's no surface.
-		return;
-	}
+	flags = SDL_GetWindowFlags(TheWindow) & SDL_WINDOW_FULLSCREEN_DESKTOP;
+	SDL_GetWindowSize(TheWindow, &Video.ViewportWidth, &Video.ViewportHeight);

-	flags = TheScreen->flags;
-	w = TheScreen->w;
-	h = TheScreen->h;
-	bpp = TheScreen->format->BitsPerPixel;
+#ifdef USE_WIN32

-	if (!SDL_VideoModeOK(w, h, bpp,	flags ^ SDL_FULLSCREEN)) {
+	if (!TheWindow) { // don't bother if there's no surface.
		return;
	}
-
-	SDL_GetClipRect(TheScreen, &clip);
-
-	// save the contents of the screen.
-	framesize = w * h * TheScreen->format->BytesPerPixel;
-
-#if defined(USE_OPENGL) || defined(USE_GLES)
-	if (!UseOpenGL)
-#endif
-	{
-		if (!(pixels = new unsigned char[framesize])) { // out of memory
-			return;
-		}
-		SDL_LockSurface(TheScreen);
-		memcpy(pixels, TheScreen->pixels, framesize);
-
-		if (TheScreen->format->palette) {
-			ncolors = TheScreen->format->palette->ncolors;
-			if (!(palette = new SDL_Color[ncolors])) {
-				delete[] pixels;
-				return;
-			}
-			memcpy(palette, TheScreen->format->palette->colors,
-				   ncolors * sizeof(SDL_Color));
-		}
-		SDL_UnlockSurface(TheScreen);
-	}
-
-	TheScreen = SDL_SetVideoMode(w, h, bpp, flags ^ SDL_FULLSCREEN);
-	if (!TheScreen) {
-		TheScreen = SDL_SetVideoMode(w, h, bpp, flags);
-		if (!TheScreen) { // completely screwed.
-#if defined(USE_OPENGL) || defined(USE_GLES)
-			if (!UseOpenGL)
-#endif
-			{
-				delete[] pixels;
-				delete[] palette;
-			}
-			fprintf(stderr, "Toggle to fullscreen, crashed all\n");
-			Exit(-1);
-		}
-	}
+	SDL_SetWindowFullscreen(TheWindow, flags ^ SDL_WINDOW_FULLSCREEN_DESKTOP);

 #ifndef USE_TOUCHSCREEN
	// Cannot hide cursor on Windows with touchscreen, as it switches
@@ -1180,36 +1146,22 @@ void ToggleFullScreen()
	//
	// Windows shows the SDL cursor when starting in fullscreen mode
	// then switching to window mode.  This hides the cursor again.
-	SDL_ShowCursor(SDL_ENABLE);
-	SDL_ShowCursor(SDL_DISABLE);
+	//SDL_ShowCursor(SDL_ENABLE);
+	//SDL_ShowCursor(SDL_DISABLE);
 #endif

 #if defined(USE_OPENGL) || defined(USE_GLES)
	if (UseOpenGL) {
		ReloadOpenGL();
-	} else
-#endif
-	{
-		SDL_LockSurface(TheScreen);
-		memcpy(TheScreen->pixels, pixels, framesize);
-		delete[] pixels;
-
-		if (TheScreen->format->palette) {
-			// !!! FIXME : No idea if that flags param is right.
-			SDL_SetPalette(TheScreen, SDL_LOGPAL, palette, 0, ncolors);
-			delete[] palette;
-		}
-		SDL_UnlockSurface(TheScreen);
	}
-
-	SDL_SetClipRect(TheScreen, &clip);
+#endif

	Invalidate(); // Update display
 #else // !USE_WIN32
-	SDL_WM_ToggleFullScreen(TheScreen);
+	SDL_SetWindowFullscreen(TheWindow, flags ^ SDL_WINDOW_FULLSCREEN_DESKTOP);
 #endif

-	Video.FullScreen = (TheScreen->flags & SDL_FULLSCREEN) ? 1 : 0;
+	Video.FullScreen = (flags & SDL_WINDOW_FULLSCREEN_DESKTOP) ? 1 : 0;
 }

 //@}
