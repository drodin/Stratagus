enum PlayerTypes {
	PlayerNeutral = 2,
	PlayerNobody  = 3,
	PlayerComputer = 4,
	PlayerPerson = 5,
	PlayerRescuePassive = 6,
	PlayerRescueActive = 7,
};

class CPlayer
{
	int Index;
	string Name;

	int Type;
	int Race;
	string AiName;

	Vec2i StartPos;

	void SetStartView(const Vec2i &pos);

	int Resources[MaxCosts];
	int StoredResources[MaxCosts];
	int Incomes[MaxCosts];
	const int Revenue[MaxCosts];

	const int UnitTypesCount[UnitTypeMax];
	const int UnitTypesAiActiveCount[UnitTypeMax];
	bool AiEnabled;

	int NumBuildings;
	int Supply;
	int Demand;

	int UnitLimit;
	int BuildingLimit;
	int TotalUnitLimit;

	int Score;
	int TotalUnits;
	int TotalBuildings;
	int TotalResources[MaxCosts];
	int TotalRazings;
	int TotalKills;

	int SpeedResourcesHarvest[MaxCosts];
	int SpeedResourcesReturn[MaxCosts];
	int SpeedBuild;
	int SpeedTrain;
	int SpeedUpgrade;
	int SpeedResearch;

	CUnit& GetUnit(int index) const;
	int GetUnitCount() const;

	bool IsEnemy(const CPlayer &player) const;
	bool IsEnemy(const CUnit &unit) const;
	bool IsAllied(const CPlayer &player) const;
	bool IsAllied(const CUnit &unit) const;
	bool IsSharedVision(const CPlayer &player) const;
	bool IsSharedVision(const CUnit &unit) const;
	bool IsBothSharedVision(const CPlayer &player) const;
	bool IsBothSharedVision(const CUnit &unit) const;
	bool IsTeamed(const CPlayer &player) const;
	bool IsTeamed(const CUnit &unit) const;
};

extern CPlayer Players[PlayerMax];
extern CPlayer *ThisPlayer;

