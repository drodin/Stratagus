diff -dupr stratagus_2.3.0.orig-old/CMakeLists.txt stratagus_2.3.0.orig/CMakeLists.txt
--- stratagus_2.3.0.orig-old/CMakeLists.txt	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/CMakeLists.txt	2015-12-14 01:35:13.158515538 +0100
@@ -161,7 +161,7 @@ set(guichan_SRCS
	src/guichan/rectangle.cpp
	src/guichan/sdl/gsdl.cpp
	src/guichan/sdl/sdlgraphics.cpp
-	src/guichan/sdl/sdlimageloader.cpp
+#	src/guichan/sdl/sdlimageloader.cpp
	src/guichan/sdl/sdlinput.cpp
	src/guichan/widget.cpp
	src/guichan/widgets/button.cpp
@@ -638,7 +638,7 @@ set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SO

 find_package(Lua51 REQUIRED)
 find_package(PNG REQUIRED)
-find_package(SDL REQUIRED)
+find_package(SDL2 REQUIRED)
 find_package(Tolua++ REQUIRED)
 find_package(ZLIB REQUIRED)

@@ -710,7 +710,7 @@ option(ENABLE_USEGAMEDIR "Place all file
 option(ENABLE_MULTIBUILD "Compile Stratagus on all CPU cores simltaneously in MSVC" ON)

 if(NOT WITH_RENDERER)
-	if(OPENGL_FOUND)
+	if(OPENGL_FOUND AND FALSE)
		set(WITH_RENDERER "OpenGL")
	elseif(OPENGLES_FOUND AND SDLGLES_FOUND)
		set(WITH_RENDERER "OpenGLES")
@@ -737,8 +737,8 @@ endif()
 # Stratagus definitions

 add_definitions(${PNG_DEFINITIONS} -DUSE_ZLIB -DPIXMAPS=\"${PIXMAPSDIRABS}\")
-include_directories(${LUA_INCLUDE_DIR} ${PNG_INCLUDE_DIR} ${SDL_INCLUDE_DIR} ${TOLUA++_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS})
-set(stratagus_LIBS ${stratagus_LIBS} ${LUA_LIBRARIES} ${PNG_LIBRARIES} ${SDL_LIBRARY} ${TOLUA++_LIBRARY} ${ZLIB_LIBRARIES})
+include_directories(${LUA_INCLUDE_DIR} ${PNG_INCLUDE_DIR} ${SDL2_INCLUDE_DIR} ${TOLUA++_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS})
+set(stratagus_LIBS ${stratagus_LIBS} ${LUA_LIBRARIES} ${PNG_LIBRARIES} ${SDL2_LIBRARY} ${TOLUA++_LIBRARY} ${ZLIB_LIBRARIES})

 if(WIN32 AND NOT ENABLE_STDIO_REDIRECT)
	add_definitions(-DNO_STDIO_REDIRECT)
@@ -836,7 +836,7 @@ endif()

 if(APPLE)
	add_definitions(-DUSE_MAC)
-	set(SDL_LIBRARY ${SDL_LIBRARY} SDLmain)
+	set(SDL2_LIBRARY ${SDL2_LIBRARY} SDL2main)
 endif()

 if(BSD)
@@ -1112,7 +1112,7 @@ if(WIN32 AND MINGW AND ENABLE_STATIC)
 endif()

 if(APPLE)
-	set_target_properties(stratagus PROPERTIES LINK_FLAGS "${LINK_FLAGS} -framework libpng -lSDLmain")
+	set_target_properties(stratagus PROPERTIES LINK_FLAGS "${LINK_FLAGS} -framework libpng -lSDL2main")
 endif()

 ########### next target ###############
@@ -1137,7 +1137,7 @@ source_group(metaserver FILES ${metaserv

 if(SQLITE_FOUND)
	add_executable(metaserver ${metaserver_SRCS} ${metaserver_HDRS})
-	target_link_libraries(metaserver ${SDL_LIBRARY} ${SQLITE_LIBRARIES})
+	target_link_libraries(metaserver ${SDL2_LIBRARY} ${SQLITE_LIBRARIES})

	if(WIN32 AND MINGW AND ENABLE_STATIC)
		set_target_properties(metaserver PROPERTIES LINK_FLAGS "${LINK_FLAGS} -static-libgcc -static-libstdc++")
diff -dupr stratagus_2.3.0.orig-old/src/editor/editloop.cpp stratagus_2.3.0.orig/src/editor/editloop.cpp
--- stratagus_2.3.0.orig-old/src/editor/editloop.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/editor/editloop.cpp	2015-06-25 02:15:26.409525123 +0200
@@ -1359,19 +1359,19 @@ static void EditorCallbackKeyDown(unsign
			break;

		case SDLK_UP: // Keyboard scrolling
-		case SDLK_KP8:
+		case SDLK_KP_8:
			KeyScrollState |= ScrollUp;
			break;
		case SDLK_DOWN:
-		case SDLK_KP2:
+		case SDLK_KP_2:
			KeyScrollState |= ScrollDown;
			break;
		case SDLK_LEFT:
-		case SDLK_KP4:
+		case SDLK_KP_4:
			KeyScrollState |= ScrollLeft;
			break;
		case SDLK_RIGHT:
-		case SDLK_KP6:
+		case SDLK_KP_6:
			KeyScrollState |= ScrollRight;
			break;
		case '0':
@@ -1411,19 +1411,19 @@ static void EditorCallbackKeyUp(unsigned

	switch (key) {
		case SDLK_UP: // Keyboard scrolling
-		case SDLK_KP8:
+		case SDLK_KP_8:
			KeyScrollState &= ~ScrollUp;
			break;
		case SDLK_DOWN:
-		case SDLK_KP2:
+		case SDLK_KP_2:
			KeyScrollState &= ~ScrollDown;
			break;
		case SDLK_LEFT:
-		case SDLK_KP4:
+		case SDLK_KP_4:
			KeyScrollState &= ~ScrollLeft;
			break;
		case SDLK_RIGHT:
-		case SDLK_KP6:
+		case SDLK_KP_6:
			KeyScrollState &= ~ScrollRight;
			break;
		default:
diff -dupr stratagus_2.3.0.orig-old/src/guichan/include/guichan/sdl/sdlgraphics.h stratagus_2.3.0.orig/src/guichan/include/guichan/sdl/sdlgraphics.h
--- stratagus_2.3.0.orig-old/src/guichan/include/guichan/sdl/sdlgraphics.h	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/guichan/include/guichan/sdl/sdlgraphics.h	2015-12-13 18:16:50.479467937 +0100
@@ -89,6 +89,7 @@ namespace gcn
          *
          * @param target the target to draw to.
          */
+        //virtual void setTarget(SDL_Renderer* renderer);
         virtual void setTarget(SDL_Surface* target);

         /**
@@ -155,6 +156,8 @@ namespace gcn
         virtual void drawVLine(int x, int y1, int y2);

         SDL_Surface* mTarget;
+        SDL_Renderer* mRenderer;
+        SDL_Texture* mTargetTexture;
         Color mColor;
         bool mAlpha;
     };
diff -dupr stratagus_2.3.0.orig-old/src/guichan/include/guichan/sdl/sdlinput.h stratagus_2.3.0.orig/src/guichan/include/guichan/sdl/sdlinput.h
--- stratagus_2.3.0.orig-old/src/guichan/include/guichan/sdl/sdlinput.h	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/guichan/include/guichan/sdl/sdlinput.h	2015-07-04 20:54:16.683944747 +0200
@@ -113,7 +113,7 @@ namespace gcn
          * @param key an SDL keysym
          * @return a Key object.
          */
-        static Key convertKeyCharacter(SDL_keysym key);
+        static Key convertKeyCharacter(SDL_Keysym key);

     protected:
         /**
diff -dupr stratagus_2.3.0.orig-old/src/guichan/sdl/sdlgraphics.cpp stratagus_2.3.0.orig/src/guichan/sdl/sdlgraphics.cpp
--- stratagus_2.3.0.orig-old/src/guichan/sdl/sdlgraphics.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/guichan/sdl/sdlgraphics.cpp	2015-12-13 12:02:39.236359344 +0100
@@ -76,6 +76,7 @@ namespace gcn
     SDLGraphics::SDLGraphics()
     {
         mAlpha = false;
+        mTarget = NULL;
     }

     void SDLGraphics::_beginDraw()
@@ -86,18 +87,42 @@ namespace gcn
         area.width = mTarget->w;
         area.height = mTarget->h;
         pushClipArea(area);
+
+        //SDL_FillRect(mTarget, NULL, SDL_MapRGBA(mTarget->format, 0, 0, 0, 0));
     }

     void SDLGraphics::_endDraw()
     {
+        //SDL_UpdateTexture(mTargetTexture, NULL, mTarget->pixels, mTarget->w * sizeof(Uint32));
+        //SDL_RenderCopy(mRenderer, mTargetTexture, NULL, NULL);
+        //SDL_RenderPresent(mRenderer);
+
         popClipArea();
     }

+#if 0
+    void SDLGraphics::setTarget(SDL_Renderer* renderer)
+    {
+        if(mTarget)
+        {
+            SDL_FreeSurface(mTarget);
+            SDL_DestroyTexture(mTargetTexture);
+        }
+
+        #if SDL_BYTEORDER == SDL_BIG_ENDIAN
+            mTarget = SDL_CreateRGBSurface(0, 640, 480, 32, 0xFF000000, 0x00FF0000, 0x0000FF00, 0x000000FF);
+        #else
+            mTarget = SDL_CreateRGBSurface(0, 640, 480, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000);
+        #endif
+        SDL_FillRect(mTarget, NULL, SDL_MapRGBA(mTarget->format, 0, 0, 0, 0));
+        mTargetTexture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_STREAMING, 640, 480);
+        mRenderer = renderer;
+    }
+#endif
     void SDLGraphics::setTarget(SDL_Surface* target)
     {
         mTarget = target;
     }
-
     bool SDLGraphics::pushClipArea(Rectangle area)
     {
         SDL_Rect rect;
@@ -154,7 +179,9 @@ namespace gcn

         SDL_Surface* srcImage = (SDL_Surface*)image->_getData();

+        //SDL_LockSurface(mTarget);
         SDL_BlitSurface(srcImage, &src, mTarget, &dst);
+        //SDL_UnlockSurface(mTarget);
     }

     void SDLGraphics::fillRectangle(const Rectangle& rectangle)
@@ -176,10 +203,20 @@ namespace gcn
			int y1 = std::max<int>(area.y, top.y);
			int x2 = std::min<int>(area.x + area.width, top.x + top.width);
			int y2 = std::min<int>(area.y + area.height, top.y + top.height);
+			int x, y;

-			Video.FillTransRectangle(SDL_MapRGB(TheScreen->format, mColor.r, mColor.g, mColor.b),
-				x1, y1, x2 - x1, y2 - y1, mColor.a);
-        }
+			//Video.FillTransRectangle(SDL_MapRGB(mTarget->format, mColor.r, mColor.g, mColor.b),
+			//	x1, y1, x2 - x1, y2 - y1, mColor.a);
+			//SDL_LockSurface(mTarget);
+			for (y = y1; y < y2; y++)
+			{
+			    for (x = x1; x < x2; x++)
+			    {
+			        SDLputPixelAlpha(mTarget, x, y, mColor);
+			    }
+			}
+			//SDL_UnlockSurface(mTarget);
+	}
         else
         {
             SDL_Rect rect;
@@ -247,7 +284,7 @@ namespace gcn
             x2 = top.x + top.width -1;
         }
		Uint32 color =
-			SDL_MapRGB(TheScreen->format, mColor.r, mColor.g, mColor.b);
+			SDL_MapRGB(mTarget->format, mColor.r, mColor.g, mColor.b);
		if (mAlpha)	{
			Video.DrawTransHLine(color, x1, y, x2 - x1, mColor.a);
		} else {
@@ -290,7 +327,7 @@ namespace gcn
             y2 = top.y + top.height - 1;
         }
		Uint32 color =
-			SDL_MapRGB(TheScreen->format, mColor.r, mColor.g, mColor.b);
+			SDL_MapRGB(mTarget->format, mColor.r, mColor.g, mColor.b);
		if (mAlpha)	{
			Video.DrawTransVLine(color, x, y1,y2 - y1, mColor.a);
		} else {
diff -dupr stratagus_2.3.0.orig-old/src/guichan/sdl/sdlimageloader.cpp stratagus_2.3.0.orig/src/guichan/sdl/sdlimageloader.cpp
--- stratagus_2.3.0.orig-old/src/guichan/sdl/sdlimageloader.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/guichan/sdl/sdlimageloader.cpp	2015-06-25 02:25:10.366839824 +0200
@@ -168,12 +168,12 @@ namespace gcn

         if (hasPink)
         {
-            SDL_SetColorKey(temp, SDL_SRCCOLORKEY,
+            SDL_SetColorKey(temp, SDL_TRUE,
                             SDL_MapRGB(temp->format,255,0,255));
         }
         if (hasAlpha)
         {
-            SDL_SetAlpha(temp, SDL_SRCALPHA, 255);
+            SDL_SetSurfaceAlphaMod(temp, 255);
         }

         return temp;
diff -dupr stratagus_2.3.0.orig-old/src/guichan/sdl/sdlinput.cpp stratagus_2.3.0.orig/src/guichan/sdl/sdlinput.cpp
--- stratagus_2.3.0.orig-old/src/guichan/sdl/sdlinput.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/guichan/sdl/sdlinput.cpp	2015-12-13 16:02:57.422162240 +0100
@@ -129,15 +129,15 @@ namespace gcn
         switch (event.type)
         {
           case SDL_KEYDOWN:
-			  mLastKey = convertKeyCharacter(event.key.keysym);
-			  mIsRepeating = true;
+              mLastKey = convertKeyCharacter(event.key.keysym);
+              mIsRepeating = true;
               keyInput.setKey(mLastKey);
               keyInput.setType(KeyInput::PRESS);
               mKeyInputQueue.push(keyInput);
               break;

           case SDL_KEYUP:
-			  mIsRepeating = false;
+              mIsRepeating = false;
               keyInput.setKey(convertKeyCharacter(event.key.keysym));
               keyInput.setType(KeyInput::RELEASE);
               mKeyInputQueue.push(keyInput);
@@ -163,6 +163,19 @@ namespace gcn
               mMouseInputQueue.push(mouseInput);
               break;

+          case SDL_MOUSEWHEEL:
+              if (event.wheel.y != 0) {
+                  SDL_GetMouseState(&mouseInput.x, &mouseInput.y);
+                  if (event.wheel.y > 0)
+                    mouseInput.setType(MouseInput::WHEEL_UP);
+                  else
+                    mouseInput.setType(MouseInput::WHEEL_DOWN);
+                  mouseInput.setButton(MouseInput::EMPTY);
+                  mouseInput.setTimeStamp(event.wheel.timestamp);
+                  mMouseInputQueue.push(mouseInput);
+              }
+              break;
+
           case SDL_MOUSEMOTION:
               mouseInput.x = event.button.x;
               mouseInput.y = event.button.y;
@@ -172,30 +185,31 @@ namespace gcn
               mMouseInputQueue.push(mouseInput);
               break;

-          case SDL_ACTIVEEVENT:
+          case SDL_WINDOWEVENT:
               /*
                * This occurs when the mouse leaves the window and the Gui-chan
                * application loses its mousefocus.
                */
-              if ((event.active.state & SDL_APPMOUSEFOCUS)
-                  && !event.active.gain)
+              switch (event.window.event)
               {
-                  mMouseInWindow = false;
+                  case SDL_WINDOWEVENT_LEAVE:
+                      {
+                          mMouseInWindow = false;

-                  if (!mMouseDown)
-                  {
-                      mouseInput.x = -1;
-                      mouseInput.y = -1;
-                      mouseInput.setButton(MouseInput::EMPTY);
-                      mouseInput.setType(MouseInput::MOTION);
-                      mMouseInputQueue.push(mouseInput);
-                  }
-              }
+                          if (!mMouseDown)
+                          {
+                              mouseInput.x = -1;
+                              mouseInput.y = -1;
+                              mouseInput.setButton(MouseInput::EMPTY);
+                              mouseInput.setType(MouseInput::MOTION);
+                              mMouseInputQueue.push(mouseInput);
+                          }
+                      }
+                      break;

-              if ((event.active.state & SDL_APPMOUSEFOCUS)
-                  && event.active.gain)
-              {
-                  mMouseInWindow = true;
+                  case SDL_WINDOWEVENT_ENTER:
+                      mMouseInWindow = true;
+                      break;
               }
               break;

@@ -215,12 +229,6 @@ namespace gcn
           case SDL_BUTTON_MIDDLE:
               return MouseInput::MIDDLE;
               break;
-          case SDL_BUTTON_WHEELUP:
-              return MouseInput::WHEEL_UP;
-              break;
-          case SDL_BUTTON_WHEELDOWN:
-              return MouseInput::WHEEL_DOWN;
-              break;
         }

 #ifdef DEBUG
@@ -230,23 +238,11 @@ namespace gcn
         return 0;
     }

-    Key SDLInput::convertKeyCharacter(SDL_keysym keysym)
+    Key SDLInput::convertKeyCharacter(SDL_Keysym keysym)
     {
         int value = 0;
         Key key;

-        if (keysym.unicode < 255)
-        {
-			if (keysym.unicode == 0)
-			{
-				value = keysym.sym;
-			}
-			else
-			{
-	            value = (int)keysym.unicode;
-			}
-        }
-
         switch (keysym.sym)
         {
           case SDLK_TAB:
@@ -297,7 +293,7 @@ namespace gcn
           case SDLK_PAGEUP:
               value = Key::K_PAGE_UP;
               break;
-          case SDLK_PRINT:
+          case SDLK_PRINTSCREEN:
               value = Key::K_PRINT_SCREEN;
               break;
           case SDLK_PAGEDOWN:
@@ -348,25 +344,27 @@ namespace gcn
           case SDLK_F15:
               value = Key::K_F15;
               break;
-          case SDLK_NUMLOCK:
+          case SDLK_NUMLOCKCLEAR:
               value = Key::K_NUM_LOCK;
               break;
           case SDLK_CAPSLOCK:
               value = Key::K_CAPS_LOCK;
               break;
-          case SDLK_SCROLLOCK:
+          case SDLK_SCROLLLOCK:
               value = Key::K_SCROLL_LOCK;
               break;
+          #if 0
           case SDLK_RMETA:
               value = Key::K_RIGHT_META;
               break;
           case SDLK_LMETA:
               value = Key::K_LEFT_META;
               break;
-          case SDLK_LSUPER:
+          #endif
+          case SDLK_LGUI:
               value = Key::K_LEFT_SUPER;
               break;
-          case SDLK_RSUPER:
+          case SDLK_RGUI:
               value = Key::K_RIGHT_SUPER;
               break;
           case SDLK_MODE:
@@ -392,6 +390,7 @@ namespace gcn
               break;

           default:
+              value = keysym.sym;
               break;
         }

@@ -399,34 +398,34 @@ namespace gcn
         {
             switch (keysym.sym)
             {
-              case SDLK_KP0:
+              case SDLK_KP_0:
                   value = Key::K_INSERT;
                   break;
-              case SDLK_KP1:
+              case SDLK_KP_1:
                   value = Key::K_END;
                   break;
-              case SDLK_KP2:
+              case SDLK_KP_2:
                   value = Key::K_DOWN;
                   break;
-              case SDLK_KP3:
+              case SDLK_KP_3:
                   value = Key::K_PAGE_DOWN;
                   break;
-              case SDLK_KP4:
+              case SDLK_KP_4:
                   value = Key::K_LEFT;
                   break;
-              case SDLK_KP5:
+              case SDLK_KP_5:
                   value = 0;
                   break;
-              case SDLK_KP6:
+              case SDLK_KP_6:
                   value = Key::K_RIGHT;
                   break;
-              case SDLK_KP7:
+              case SDLK_KP_7:
                   value = Key::K_HOME;
                   break;
-              case SDLK_KP8:
+              case SDLK_KP_8:
                   value = Key::K_UP;
                   break;
-              case SDLK_KP9:
+              case SDLK_KP_9:
                   value = Key::K_PAGE_UP;
                   break;
               default:
@@ -438,9 +437,9 @@ namespace gcn
         key.setShiftPressed((keysym.mod & KMOD_SHIFT) != 0);
         key.setControlPressed((keysym.mod & KMOD_CTRL) != 0);
         key.setAltPressed((keysym.mod & KMOD_ALT) != 0);
-        key.setMetaPressed((keysym.mod & KMOD_META) != 0);
+        key.setMetaPressed((keysym.mod & KMOD_GUI) != 0);

-        if (keysym.sym >= SDLK_KP0 && keysym.sym <= SDLK_KP_EQUALS)
+        if (keysym.sym >= SDLK_KP_0 && keysym.sym <= SDLK_KP_EQUALS)
         {
             key.setNumericPad(true);
         }
diff -dupr stratagus_2.3.0.orig-old/src/guichan/widget.cpp stratagus_2.3.0.orig/src/guichan/widget.cpp
--- stratagus_2.3.0.orig-old/src/guichan/widget.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/guichan/widget.cpp	2015-12-13 13:50:06.799517586 +0100
@@ -70,9 +70,9 @@ extern int Str2SdlKey(const char *str);

 int convertKey(const char *key)
 {
-	SDL_keysym keysym;
+	SDL_Keysym keysym;
	memset(&keysym, 0, sizeof(keysym));
-	keysym.sym = (SDLKey)Str2SdlKey(key);
+	keysym.sym = (SDL_Keycode)Str2SdlKey(key);
	gcn::Key k = gcn::SDLInput::convertKeyCharacter(keysym);
	return k.getValue();
 }
@@ -411,7 +411,8 @@ namespace gcn
               if (hasMouse())
               {
                   requestFocus();
-                  mFocusHandler->requestDrag(this);
+                  if (b != MouseInput::WHEEL_UP && b != MouseInput::WHEEL_DOWN)
+                      mFocusHandler->requestDrag(this);
               }

               if (b != MouseInput::WHEEL_UP && b != MouseInput::WHEEL_DOWN)
@@ -440,20 +441,6 @@ namespace gcn
                       mClickButton = 0;
                   }
               }
-              else if (b == MouseInput::WHEEL_UP)
-              {
-                  for (iter = mMouseListeners.begin(); iter != mMouseListeners.end(); ++iter)
-                  {
-                      (*iter)->mouseWheelUp(x, y);
-                  }
-              }
-              else
-              {
-                  for (iter = mMouseListeners.begin(); iter != mMouseListeners.end(); ++iter)
-                  {
-                      (*iter)->mouseWheelDown(x, y);
-                  }
-              }
               setDirty(true);
               break;

@@ -493,6 +480,22 @@ namespace gcn
               }
               setDirty(true);
               break;
+
+          case MouseInput::WHEEL_UP:
+              for (iter = mMouseListeners.begin(); iter != mMouseListeners.end(); ++iter)
+              {
+                  (*iter)->mouseWheelUp(x, y);
+              }
+              setDirty(true);
+              break;
+
+          case MouseInput::WHEEL_DOWN:
+              for (iter = mMouseListeners.begin(); iter != mMouseListeners.end(); ++iter)
+              {
+                  (*iter)->mouseWheelDown(x, y);
+              }
+              setDirty(true);
+              break;
         }
     }

diff -dupr stratagus_2.3.0.orig-old/src/include/video.h stratagus_2.3.0.orig/src/include/video.h
--- stratagus_2.3.0.orig-old/src/include/video.h	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/include/video.h	2015-12-13 09:14:15.447510125 +0100
@@ -360,7 +360,7 @@ public:

	int Width;
	int Height;
-#if defined(USE_OPENGL) || defined(USE_GLES)
+#if 1 || defined(USE_OPENGL) || defined(USE_GLES)
	int ViewportWidth;         /// Actual width of the window
	int ViewportHeight;        /// Actual height of the window
 #endif
@@ -401,6 +401,8 @@ extern unsigned long SlowFrameCounter;
 extern void SetPlayersPalette();

 /// The SDL screen
+extern SDL_Window *TheWindow;
+extern SDL_Renderer *TheRenderer;
 extern SDL_Surface *TheScreen;

 #if defined(USE_OPENGL) || defined(USE_GLES)
diff -dupr stratagus_2.3.0.orig-old/src/map/map_fog.cpp stratagus_2.3.0.orig/src/map/map_fog.cpp
--- stratagus_2.3.0.orig-old/src/map/map_fog.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/map/map_fog.cpp	2015-12-16 14:05:05.541653640 +0100
@@ -451,7 +451,9 @@ void VideoDrawOnlyFog(int x, int y)
		drect.x = x;
		drect.y = y;

+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(OnlyFogSurface, &srect, TheScreen, &drect);
+		//SDL_UnlockSurface(TheScreen);
	}
 }

@@ -683,24 +685,22 @@ void CMap::InitFogOfWar()
		//
		// Generate Only Fog surface.
		//
-		s = SDL_CreateRGBSurface(SDL_SWSURFACE, PixelTileSize.x, PixelTileSize.y,
+		OnlyFogSurface = SDL_CreateRGBSurface(SDL_SWSURFACE, PixelTileSize.x, PixelTileSize.y,
								 32, RMASK, GMASK, BMASK, AMASK);

		SDL_GetRGB(FogOfWarColorSDL, TheScreen->format, &r, &g, &b);
-		Uint32 color = Video.MapRGB(s->format, r, g, b);
+		Uint32 color = Video.MapRGBA(OnlyFogSurface->format, r, g, b, FogOfWarOpacity);

-		SDL_FillRect(s, NULL, color);
-		OnlyFogSurface = SDL_DisplayFormat(s);
-		SDL_SetAlpha(OnlyFogSurface, SDL_SRCALPHA | SDL_RLEACCEL, FogOfWarOpacity);
-		VideoPaletteListRemove(s);
-		SDL_FreeSurface(s);
+		SDL_FillRect(OnlyFogSurface, NULL, color);
+		//SDL_SetSurfaceAlphaMod(OnlyFogSurface, FogOfWarOpacity);
+		//VideoPaletteListRemove(OnlyFogSurface);

		//
		// Generate Alpha Fog surface.
		//
		if (FogGraphic->Surface->format->BytesPerPixel == 1) {
-			s = SDL_DisplayFormat(FogGraphic->Surface);
-			SDL_SetAlpha(s, SDL_SRCALPHA | SDL_RLEACCEL, FogOfWarOpacity);
+			s = SDL_ConvertSurfaceFormat(FogGraphic->Surface, SDL_PIXELFORMAT_RGB888, 0);
+			SDL_SetSurfaceAlphaMod(s, FogOfWarOpacity);
		} else {
			// Copy the top row to a new surface
			SDL_PixelFormat *f = FogGraphic->Surface->format;
diff -dupr stratagus_2.3.0.orig-old/src/map/minimap.cpp stratagus_2.3.0.orig/src/map/minimap.cpp
--- stratagus_2.3.0.orig-old/src/map/minimap.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/map/minimap.cpp	2015-12-13 12:00:53.965564355 +0100
@@ -238,7 +238,7 @@ void CMinimap::UpdateTerrain()
 #endif
	{
		if (bpp == 1) {
-			SDL_SetPalette(MinimapTerrainSurface, SDL_LOGPAL,
+			SDL_SetPaletteColors(MinimapTerrainSurface->format->palette,
						   Map.TileGraphic->Surface->format->palette->colors, 0, 256);
		}
	}
@@ -246,13 +246,12 @@ void CMinimap::UpdateTerrain()
	const int tilepitch = Map.TileGraphic->Surface->w / PixelTileSize.x;

 #if defined(USE_OPENGL) || defined(USE_GLES)
-	if (UseOpenGL) {
-		SDL_LockSurface(Map.TileGraphic->Surface);
-	} else
+	if (!UseOpenGL)
 #endif
	{
-		SDL_LockSurface(MinimapTerrainSurface);
+		//SDL_LockSurface(MinimapTerrainSurface);
	}
+	//SDL_LockSurface(Map.TileGraphic->Surface);

	//
	//  Pixel 7,6 7,14, 15,6 15,14 are taken for the minimap picture.
@@ -304,9 +303,9 @@ void CMinimap::UpdateTerrain()
	if (!UseOpenGL)
 #endif
	{
-		SDL_UnlockSurface(MinimapTerrainSurface);
+		//SDL_UnlockSurface(MinimapTerrainSurface);
	}
-	SDL_UnlockSurface(Map.TileGraphic->Surface);
+	//SDL_UnlockSurface(Map.TileGraphic->Surface);
 }

 /**
@@ -348,9 +347,9 @@ void CMinimap::UpdateXY(const Vec2i &pos
	if (!UseOpenGL)
 #endif
	{
-		SDL_LockSurface(MinimapTerrainSurface);
+		//SDL_LockSurface(MinimapTerrainSurface);
	}
-	SDL_LockSurface(Map.TileGraphic->Surface);
+	//SDL_LockSurface(Map.TileGraphic->Surface);

	const int ty = pos.y * Map.Info.MapWidth;
	const int tx = pos.x;
@@ -423,9 +422,9 @@ void CMinimap::UpdateXY(const Vec2i &pos
	if (!UseOpenGL)
 #endif
	{
-		SDL_UnlockSurface(MinimapTerrainSurface);
+		//SDL_UnlockSurface(MinimapTerrainSurface);
	}
-	SDL_UnlockSurface(Map.TileGraphic->Surface);
+	//SDL_UnlockSurface(Map.TileGraphic->Surface);
 }

 /**
@@ -553,8 +552,8 @@ void CMinimap::Update()
	if (!UseOpenGL)
 #endif
	{
-		SDL_LockSurface(MinimapSurface);
-		SDL_LockSurface(MinimapTerrainSurface);
+		//SDL_LockSurface(MinimapSurface);
+		//SDL_LockSurface(MinimapTerrainSurface);
	}

	for (int my = 0; my < H; ++my) {
@@ -590,7 +589,7 @@ void CMinimap::Update()
	if (!UseOpenGL)
 #endif
	{
-		SDL_UnlockSurface(MinimapTerrainSurface);
+		//SDL_UnlockSurface(MinimapTerrainSurface);
	}

	//
@@ -606,7 +605,7 @@ void CMinimap::Update()
	if (!UseOpenGL)
 #endif
	{
-		SDL_UnlockSurface(MinimapSurface);
+		//SDL_UnlockSurface(MinimapSurface);
	}
 }

@@ -681,7 +680,9 @@ void CMinimap::Draw() const
 #endif
	{
		SDL_Rect drect = {Sint16(X), Sint16(Y), 0, 0};
+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(MinimapSurface, NULL, TheScreen, &drect);
+		//SDL_UnlockSurface(TheScreen);
	}

	DrawEvents();
diff -dupr stratagus_2.3.0.orig-old/src/stratagus/player.cpp stratagus_2.3.0.orig/src/stratagus/player.cpp
--- stratagus_2.3.0.orig-old/src/stratagus/player.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/stratagus/player.cpp	2015-12-14 08:27:13.122359117 +0100
@@ -1198,13 +1204,15 @@ void GraphicPlayerPixels(CPlayer &player
 {
	Assert(PlayerColorIndexCount);

-	SDL_LockSurface(sprite.Surface);
+	//SDL_LockSurface(sprite.Surface);
	std::vector<SDL_Color> sdlColors(player.UnitColors.Colors.begin(), player.UnitColors.Colors.end());
-	SDL_SetColors(sprite.Surface, &sdlColors[0], PlayerColorIndexStart, PlayerColorIndexCount);
+	SDL_SetPaletteColors(sprite.Surface->format->palette, &sdlColors[0], PlayerColorIndexStart, PlayerColorIndexCount);
	if (sprite.SurfaceFlip) {
-		SDL_SetColors(sprite.SurfaceFlip, &sdlColors[0], PlayerColorIndexStart, PlayerColorIndexCount);
+		//SDL_LockSurface(sprite.SurfaceFlip);
+		SDL_SetPaletteColors(sprite.SurfaceFlip->format->palette, &sdlColors[0], PlayerColorIndexStart, PlayerColorIndexCount);
+		//SDL_UnlockSurface(sprite.SurfaceFlip);
	}
-	SDL_UnlockSurface(sprite.Surface);
+	//SDL_UnlockSurface(sprite.Surface);
 }

 /**
diff -dupr stratagus_2.3.0.orig-old/src/ui/botpanel.cpp stratagus_2.3.0.orig/src/ui/botpanel.cpp
--- stratagus_2.3.0.orig-old/src/ui/botpanel.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/ui/botpanel.cpp	2015-07-04 21:02:04.030980136 +0200
@@ -1396,9 +1396,9 @@ void CButtonPanel::DoClicked(int button)
 */
 int CButtonPanel::DoKey(int key)
 {
-	SDL_keysym keysym;
+	SDL_Keysym keysym;
	memset(&keysym, 0, sizeof(keysym));
-	keysym.sym = (SDLKey)key;
+	keysym.sym = (SDL_Keycode)key;
	gcn::Key k = gcn::SDLInput::convertKeyCharacter(keysym);
	key = k.getValue();

diff -dupr stratagus_2.3.0.orig-old/src/ui/interface.cpp stratagus_2.3.0.orig/src/ui/interface.cpp
--- stratagus_2.3.0.orig-old/src/ui/interface.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/ui/interface.cpp	2015-12-13 09:44:04.383032591 +0100
@@ -305,8 +305,8 @@ void UiToggleBigMap()

		UI.MapArea.X = 0;
		UI.MapArea.Y = 0;
-		UI.MapArea.EndX = Video.Width - 1;
-		UI.MapArea.EndY = Video.Height - 1;
+		UI.MapArea.EndX = Video.ViewportWidth - 1;
+		UI.MapArea.EndY = Video.ViewportHeight - 1;

		SetViewportMode(UI.ViewportMode);

@@ -714,19 +714,19 @@ static bool CommandKey(int key)
			break;

		case SDLK_UP:
-		case SDLK_KP8:
+		case SDLK_KP_8:
			KeyScrollState |= ScrollUp;
			break;
		case SDLK_DOWN:
-		case SDLK_KP2:
+		case SDLK_KP_2:
			KeyScrollState |= ScrollDown;
			break;
		case SDLK_LEFT:
-		case SDLK_KP4:
+		case SDLK_KP_4:
			KeyScrollState |= ScrollLeft;
			break;
		case SDLK_RIGHT:
-		case SDLK_KP6:
+		case SDLK_KP_6:
			KeyScrollState |= ScrollRight;
			break;

@@ -979,20 +979,20 @@ int HandleKeyModifiersDown(unsigned key,
			return 1;
		case SDLK_LALT:
		case SDLK_RALT:
-		case SDLK_LMETA:
-		case SDLK_RMETA:
+		//case SDLK_LMETA:
+		//case SDLK_RMETA:
			KeyModifiers |= ModifierAlt;
			// maxy: disabled
			if (InterfaceState == IfaceStateNormal) {
				SelectedUnitChanged(); // VLADI: to allow alt-buttons
			}
			return 1;
-		case SDLK_LSUPER:
-		case SDLK_RSUPER:
+		case SDLK_LGUI:
+		case SDLK_RGUI:
			KeyModifiers |= ModifierSuper;
			return 1;
		case SDLK_SYSREQ:
-		case SDLK_PRINT:
+		case SDLK_PRINTSCREEN:
			Screenshot();
			if (GameRunning) {
				SetMessage("%s", _("Screenshot made."));
@@ -1025,16 +1025,16 @@ int HandleKeyModifiersUp(unsigned key, u
			return 1;
		case SDLK_LALT:
		case SDLK_RALT:
-		case SDLK_LMETA:
-		case SDLK_RMETA:
+		//case SDLK_LMETA:
+		//case SDLK_RMETA:
			KeyModifiers &= ~ModifierAlt;
			// maxy: disabled
			if (InterfaceState == IfaceStateNormal) {
				SelectedUnitChanged(); // VLADI: to allow alt-buttons
			}
			return 1;
-		case SDLK_LSUPER:
-		case SDLK_RSUPER:
+		case SDLK_LGUI:
+		case SDLK_RGUI:
			KeyModifiers &= ~ModifierSuper;
			return 1;
	}
@@ -1046,8 +1046,8 @@ int HandleKeyModifiersUp(unsigned key, u
 */
 static bool IsKeyPad(unsigned key, unsigned *kp)
 {
-	if (key >= SDLK_KP0 && key <= SDLK_KP9) {
-		*kp = SDLK_0 + (key - SDLK_KP0);
+	if (key >= SDLK_KP_0 && key <= SDLK_KP_9) {
+		*kp = SDLK_0 + (key - SDLK_KP_0);
	} else if (key == SDLK_KP_PERIOD) {
		*kp = SDLK_PERIOD;
	} else if (key == SDLK_KP_DIVIDE) {
@@ -1114,19 +1114,19 @@ void HandleKeyUp(unsigned key, unsigned

	switch (key) {
		case SDLK_UP:
-		case SDLK_KP8:
+		case SDLK_KP_8:
			KeyScrollState &= ~ScrollUp;
			break;
		case SDLK_DOWN:
-		case SDLK_KP2:
+		case SDLK_KP_2:
			KeyScrollState &= ~ScrollDown;
			break;
		case SDLK_LEFT:
-		case SDLK_KP4:
+		case SDLK_KP_4:
			KeyScrollState &= ~ScrollLeft;
			break;
		case SDLK_RIGHT:
-		case SDLK_KP6:
+		case SDLK_KP_6:
			KeyScrollState &= ~ScrollRight;
			break;
		default:
diff -dupr stratagus_2.3.0.orig-old/src/video/color.cpp stratagus_2.3.0.orig/src/video/color.cpp
--- stratagus_2.3.0.orig-old/src/video/color.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/video/color.cpp	2015-12-15 02:58:37.430067327 +0100
@@ -60,7 +60,7 @@ void CColor::Parse(lua_State *l, const i
	this->R = r;
	this->G = g;
	this->B = b;
-	this->A = 0;
+	this->A = 255;
 }

 //@}
diff -dupr stratagus_2.3.0.orig-old/src/video/cursor.cpp stratagus_2.3.0.orig/src/video/cursor.cpp
--- stratagus_2.3.0.orig-old/src/video/cursor.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/video/cursor.cpp	2015-12-13 11:58:43.135061942 +0100
@@ -286,7 +286,9 @@ void DrawCursor()
		}

		SDL_Rect srcRect = { Sint16(pos.x), Sint16(pos.y), Uint16(GameCursor->G->getWidth()), Uint16(GameCursor->G->getHeight())};
+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(TheScreen, &srcRect, HiddenSurface, NULL);
+		//SDL_UnlockSurface(TheScreen);
	}

	//  Last, Normal cursor.
@@ -309,7 +311,9 @@ void HideCursor()
		!GameRunning && !Editor.Running && GameCursor) {
		const PixelPos pos = CursorScreenPos - GameCursor->HotPos;
		SDL_Rect dstRect = {Sint16(pos.x), Sint16(pos.y), 0, 0 };
+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(HiddenSurface, NULL, TheScreen, &dstRect);
+		//SDL_UnlockSurface(TheScreen);
	}
 }

diff -dupr stratagus_2.3.0.orig-old/src/video/font.cpp stratagus_2.3.0.orig/src/video/font.cpp
--- stratagus_2.3.0.orig-old/src/video/font.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/video/font.cpp	2015-12-13 11:54:51.821709733 +0100
@@ -147,8 +147,10 @@ static void VideoDrawChar(const CGraphic
		SDL_Rect srect = {Sint16(gx), Sint16(gy), Uint16(w), Uint16(h)};
		SDL_Rect drect = {Sint16(x), Sint16(y), 0, 0};
		std::vector<SDL_Color> sdlColors(fc.Colors, fc.Colors + MaxFontColors);
-		SDL_SetColors(g.Surface, &sdlColors[0], 0, MaxFontColors);
+		SDL_SetPaletteColors(g.Surface->format->palette, &sdlColors[0], 0, MaxFontColors);
+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(g.Surface, &srect, TheScreen, &drect);
+		//SDL_UnlockSurface(TheScreen);
	}
 }

@@ -788,10 +790,11 @@ void CFont::MeasureWidths()
	CharWidth = new char[maxy];
	memset(CharWidth, 0, maxy);
	CharWidth[0] = G->Width / 2;  // a reasonable value for SPACE
-	const Uint32 ckey = G->Surface->format->colorkey;
+	Uint32 ckey = 0;
	const int ipr = G->Surface->w / G->Width; // images per row

	SDL_LockSurface(G->Surface);
+	SDL_GetColorKey(G->Surface, &ckey);
	for (int y = 1; y < maxy; ++y) {
		const unsigned char *sp = (const unsigned char *)G->Surface->pixels +
								  (y / ipr) * G->Surface->pitch * G->Height +
diff -dupr stratagus_2.3.0.orig-old/src/video/graphic.cpp stratagus_2.3.0.orig/src/video/graphic.cpp
--- stratagus_2.3.0.orig-old/src/video/graphic.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/video/graphic.cpp	2015-12-15 17:59:02.535955407 +0100
@@ -95,7 +95,9 @@ void CGraphic::DrawSub(int gx, int gy, i
	{
		SDL_Rect srect = {Sint16(gx), Sint16(gy), Uint16(w), Uint16(h)};
		SDL_Rect drect = {Sint16(x), Sint16(y), 0, 0};
+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(Surface, &srect, TheScreen, &drect);
+		//SDL_UnlockSurface(TheScreen);
	}
 }

@@ -114,7 +116,38 @@ void CGraphic::DrawSubClip(int gx, int g
	int oldx = x;
	int oldy = y;
	CLIP_RECTANGLE(x, y, w, h);
-	DrawSub(gx + x - oldx, gy + y - oldy, w, h, x, y);
+	gx += x - oldx;
+	gy += y - oldy;
+
+	#if 1
+	if (File=="graphics/human/units/elven_archer.png" && Surface->format->BytesPerPixel == 1)
+	{
+	  //FILE *file = fopen("archer-test.data", "w+");
+	  FILE *file = fopen("archer-palete-draw.data", "w+");
+	  if (file) {
+	    //fwrite(s->pixels, 1, s->pitch*s->h, file);
+	    //fwrite(s->format->palette->colors, 1, 3 * s->format->palette->ncolors, file);
+	    for (int i = 0; i < Surface->format->palette->ncolors; i++)
+	      fwrite(&Surface->format->palette->colors[i], 1, 4, file);
+	    fclose(file);
+	  }
+	}
+	#endif
+	//DrawSub(gx + x - oldx, gy + y - oldy, w, h, x, y);
+	SDL_Rect srect = {Sint16(gx), Sint16(gy), Uint16(w), Uint16(h)};
+	SDL_Rect drect = {Sint16(x), Sint16(y), 0, 0};
+	//SDL_LockSurface(TheScreen);
+	int ret;
+	ret = SDL_BlitSurface(Surface, &srect, TheScreen, &drect);
+	//SDL_UnlockSurface(TheScreen);
+	#if 1
+	if (File=="graphics/human/units/elven_archer.png" && Surface->format->BytesPerPixel == 1)
+	{
+		fprintf(stderr, "drawing non-flipped archer, srect %d, %d, %dx%d on %d, %d\n", srect.x, srect.y, w, h, drect.x, drect.y);
+		fprintf(stderr, "format %x\n", Surface->format->format);
+		if (ret) fprintf(stderr, "%s\n", SDL_GetError());
+	}
+	#endif
 }

 /**
@@ -140,10 +173,11 @@ void CGraphic::DrawSubTrans(int gx, int
	} else
 #endif
	{
-		int oldalpha = Surface->format->alpha;
-		SDL_SetAlpha(Surface, SDL_SRCALPHA, alpha);
+		Uint8 oldalpha = 0xff;
+		SDL_GetSurfaceAlphaMod(Surface, &oldalpha);
+		SDL_SetSurfaceAlphaMod(Surface, alpha);
		DrawSub(gx, gy, w, h, x, y);
-		SDL_SetAlpha(Surface, SDL_SRCALPHA, oldalpha);
+		SDL_SetSurfaceAlphaMod(Surface, oldalpha);
	}
 }

@@ -303,7 +337,9 @@ void CGraphic::DrawFrameX(unsigned frame
		SDL_Rect srect = {frameFlip_map[frame].x, frameFlip_map[frame].y, Uint16(Width), Uint16(Height)};
		SDL_Rect drect = {Sint16(x), Sint16(y), 0, 0};

+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(SurfaceFlip, &srect, TheScreen, &drect);
+		//SDL_UnlockSurface(TheScreen);
	}
 }

@@ -354,12 +390,38 @@ void CGraphic::DrawFrameClipX(unsigned f
		const int oldx = x;
		const int oldy = y;
		CLIP_RECTANGLE(x, y, srect.w, srect.h);
+	#if 1
+	if (File=="graphics/human/units/elven_archer.png" && SurfaceFlip->format->BytesPerPixel == 1)
+	{
+	  //FILE *file = fopen("archer-test.data", "w+");
+	  FILE *file = fopen("archer-palete-flip-draw.data", "w+");
+	  if (file) {
+	    //fwrite(s->pixels, 1, s->pitch*s->h, file);
+	    //fwrite(s->format->palette->colors, 1, 3 * s->format->palette->ncolors, file);
+	    for (int i = 0; i < SurfaceFlip->format->palette->ncolors; i++)
+	      fwrite(&SurfaceFlip->format->palette->colors[i], 1, 4, file);
+	    fclose(file);
+	  }
+	}
+	#endif
		srect.x += x - oldx;
		srect.y += y - oldy;

		SDL_Rect drect = {Sint16(x), Sint16(y), 0, 0};

-		SDL_BlitSurface(SurfaceFlip, &srect, TheScreen, &drect);
+		int ret;
+		//SDL_LockSurface(TheScreen);
+		//SDL_SetSurfaceAlphaMod(SurfaceFlip, 0xFF);
+		ret = SDL_BlitSurface(SurfaceFlip, &srect, TheScreen, &drect);
+		//SDL_UnlockSurface(TheScreen);
+	#if 1
+	if (File=="graphics/human/units/elven_archer.png" && SurfaceFlip->format->BytesPerPixel == 1)
+	{
+		fprintf(stderr, "drawing flipped archer, srect %d, %d, %dx%d on %d, %d\n", srect.x+x-oldx, srect.y, srect.w, srect.h, drect.x, drect.y);
+		fprintf(stderr, "format %x\n", SurfaceFlip->format->format);
+		if (ret) fprintf(stderr, "flip: %s\n", SDL_GetError());
+	}
+	#endif
	}
 }

@@ -376,11 +438,14 @@ void CGraphic::DrawFrameTransX(unsigned
	{
		SDL_Rect srect = {frameFlip_map[frame].x, frameFlip_map[frame].y, Uint16(Width), Uint16(Height)};
		SDL_Rect drect = {Sint16(x), Sint16(y), 0, 0};
-		const int oldalpha = Surface->format->alpha;
+		Uint8 oldalpha = 0xff;
+		SDL_GetSurfaceAlphaMod(SurfaceFlip, &oldalpha);

-		SDL_SetAlpha(Surface, SDL_SRCALPHA, alpha);
+		SDL_SetSurfaceAlphaMod(SurfaceFlip, alpha);
+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(SurfaceFlip, &srect, TheScreen, &drect);
-		SDL_SetAlpha(Surface, SDL_SRCALPHA, oldalpha);
+		//SDL_UnlockSurface(TheScreen);
+		SDL_SetSurfaceAlphaMod(SurfaceFlip, oldalpha);
	}
 }

@@ -397,18 +462,21 @@ void CGraphic::DrawFrameClipTransX(unsig
	{
		SDL_Rect srect = {frameFlip_map[frame].x, frameFlip_map[frame].y, Uint16(Width), Uint16(Height)};

-		const int oldx = x;
-		const int oldy = y;
+		int oldx = x;
+		int oldy = y;
		CLIP_RECTANGLE(x, y, srect.w, srect.h);
		srect.x += x - oldx;
		srect.y += y - oldy;

		SDL_Rect drect = {Sint16(x), Sint16(y), 0, 0};
-		const int oldalpha = SurfaceFlip->format->alpha;
+		Uint8 oldalpha = 0xff;
+		SDL_GetSurfaceAlphaMod(SurfaceFlip, &oldalpha);

-		SDL_SetAlpha(SurfaceFlip, SDL_SRCALPHA, alpha);
+		SDL_SetSurfaceAlphaMod(SurfaceFlip, alpha);
+		//SDL_LockSurface(TheScreen);
		SDL_BlitSurface(SurfaceFlip, &srect, TheScreen, &drect);
-		SDL_SetAlpha(SurfaceFlip, SDL_SRCALPHA, oldalpha);
+		//SDL_UnlockSurface(TheScreen);
+		SDL_SetSurfaceAlphaMod(SurfaceFlip, oldalpha);
	}
 }

@@ -638,7 +706,7 @@ static void ApplyGrayScale(SDL_Surface *
				const int gray = redGray * pal.colors[i].r + greenGray * pal.colors[i].g + blueGray * pal.colors[i].b;
				colors[i].r = colors[i].g = colors[i].b = gray;
			}
-			SDL_SetColors(Surface, &colors[0], 0, 256);
+			SDL_SetPaletteColors(&pal, &colors[0], 0, 256);
			break;
		}
		case 4: {
@@ -689,6 +757,20 @@ void CGraphic::Load(bool grayscale)

	Assert(Width <= GraphicWidth && Height <= GraphicHeight);

+	#if 1
+	if (File=="graphics/human/units/elven_archer.png" && Surface->format->BytesPerPixel == 1)
+	{
+	  //FILE *file = fopen("archer-test.data", "w+");
+	  FILE *file = fopen("archer-palete-orig.data", "w+");
+	  if (file) {
+	    //fwrite(s->pixels, 1, s->pitch*s->h, file);
+	    //fwrite(s->format->palette->colors, 1, 3 * s->format->palette->ncolors, file);
+	    for (int i = 0; i < Surface->format->palette->ncolors; i++)
+	      fwrite(&Surface->format->palette->colors[i], 1, 3, file);
+	    fclose(file);
+	  }
+	}
+	#endif
	if ((GraphicWidth / Width) * Width != GraphicWidth ||
		(GraphicHeight / Height) * Height != GraphicHeight) {
		fprintf(stderr, "Invalid graphic (width, height) %s\n", File.c_str());
@@ -854,15 +936,20 @@ void CGraphic::Flip()
		return;
	}

-	SDL_Surface *s = SurfaceFlip = SDL_ConvertSurface(Surface, Surface->format, SDL_SWSURFACE);
-	if (Surface->flags & SDL_SRCCOLORKEY) {
-		SDL_SetColorKey(SurfaceFlip, SDL_SRCCOLORKEY | SDL_RLEACCEL, Surface->format->colorkey);
+	SDL_Surface *s = SurfaceFlip = SDL_ConvertSurface(Surface, Surface->format, 0);
+	Uint32 ckey;
+	if (!SDL_GetColorKey(Surface, &ckey)) {
+		SDL_SetColorKey(SurfaceFlip, SDL_TRUE, ckey);
	}
+	//SDL_SetSurfaceAlphaMod(SurfaceFlip, 0xFF);
+	SDL_SetSurfaceBlendMode(SurfaceFlip, SDL_BLENDMODE_NONE);
	if (SurfaceFlip->format->BytesPerPixel == 1) {
+		//SDL_SetPaletteColors(SurfaceFlip->format->palette, Surface->format->palette->colors, 0, Surface->format->palette->ncolors);
		VideoPaletteListAdd(SurfaceFlip);
	}
	SDL_LockSurface(Surface);
	SDL_LockSurface(s);
+	//fprintf(stderr, "flipping sprite %s (%dbpp)\n", File.c_str(), 8*s->format->BytesPerPixel);
	switch (s->format->BytesPerPixel) {
		case 1:
			for (int i = 0; i < s->h; ++i) {
@@ -881,6 +968,13 @@ void CGraphic::Flip()
			}
			break;
		case 4: {
+			for (int i = 0; i < s->h; ++i) {
+				for (int j = 0; j < s->w; ++j) {
+					memcpy(&((char *)s->pixels)[j + i * s->pitch],
+						   &((char *)Surface->pixels)[(s->w - j - 1) * 4 + i * Surface->pitch], 4);
+				}
+			}
+#if 0
			unsigned int p0 = s->pitch;
			unsigned int p1 = Surface->pitch;
			const int width = s->w;
@@ -932,9 +1026,38 @@ void CGraphic::Flip()
				p0 += s->pitch;
				p1 += Surface->pitch;
			}
+#endif
		}
		break;
	}
+	#if 1
+	if (File=="graphics/human/units/elven_archer.png" && Surface->format->BytesPerPixel == 1)
+	{
+	  //FILE *file = fopen("archer-test.data", "w+");
+	  FILE *file = fopen("archer-palete.data", "w+");
+	  if (file) {
+	    //fwrite(s->pixels, 1, s->pitch*s->h, file);
+	    //fwrite(s->format->palette->colors, 1, 3 * s->format->palette->ncolors, file);
+	    for (int i = 0; i < Surface->format->palette->ncolors; i++)
+	      fwrite(&Surface->format->palette->colors[i], 1, 3, file);
+	    fclose(file);
+	  }
+	}
+	#endif
+	#if 1
+	if (File=="graphics/human/units/elven_archer.png" && s->format->BytesPerPixel == 1)
+	{
+	  //FILE *file = fopen("archer-test.data", "w+");
+	  FILE *file = fopen("archer-palete-flip.data", "w+");
+	  if (file) {
+	    //fwrite(s->pixels, 1, s->pitch*s->h, file);
+	    //fwrite(s->format->palette->colors, 1, 3 * s->format->palette->ncolors, file);
+	    for (int i = 0; i < s->format->palette->ncolors; i++)
+	      fwrite(&s->format->palette->colors[i], 1, 3, file);
+	    fclose(file);
+	  }
+	}
+	#endif
	SDL_UnlockSurface(Surface);
	SDL_UnlockSurface(s);

@@ -943,9 +1066,8 @@ void CGraphic::Flip()
	frameFlip_map = new frame_pos_t[NumFrames];

	for (int frame = 0; frame < NumFrames; ++frame) {
-		frameFlip_map[frame].x = (SurfaceFlip->w - (frame % (SurfaceFlip->w /
-															 Width)) * Width) - Width;
-		frameFlip_map[frame].y = (frame / (SurfaceFlip->w / Width)) * Height;
+		frameFlip_map[frame].x = ((NumFrames - frame - 1) % (SurfaceFlip->w / Width)) * Width;
+		frameFlip_map[frame].y = (frame / (SurfaceFlip->w / Width)) * Height;
	}
 }

@@ -958,6 +1080,7 @@ void CGraphic::UseDisplayFormat()
	if (UseOpenGL) { return; }
 #endif

+#if 0
	SDL_Surface *s = Surface;

	if (s->format->Amask != 0) {
@@ -978,6 +1101,8 @@ void CGraphic::UseDisplayFormat()
		VideoPaletteListRemove(s);
		SDL_FreeSurface(s);
	}
+#endif
+
 }

 #if defined(USE_OPENGL) || defined(USE_GLES)
@@ -1004,10 +1129,10 @@ static int PowerOf2(int x)
 static void MakeTextures2(CGraphic *g, GLuint texture, CUnitColors *colors,
						  int ow, int oh)
 {
-	int useckey = g->Surface->flags & SDL_SRCCOLORKEY;
+	Uint32 ckey;
+	int useckey = !SDL_GetColorKey(g->Surface, &ckey);
	SDL_PixelFormat *f = g->Surface->format;
	int bpp = f->BytesPerPixel;
-	Uint32 ckey = f->colorkey;

	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
	int maxw = std::min<int>(g->GraphicWidth - ow, GLMaxTextureSize);
@@ -1017,9 +1142,7 @@ static void MakeTextures2(CGraphic *g, G
	unsigned char *tex = new unsigned char[w * h * 4];
	memset(tex, 0, w * h * 4);
	unsigned char alpha;
-	if (g->Surface->flags & SDL_SRCALPHA) {
-		alpha = f->alpha;
-	} else {
+	if (!!SDL_GetSurfaceAlphaMod(g->Surface, &alpha) {
		alpha = 0xff;
	}

@@ -1213,8 +1336,8 @@ void CGraphic::Resize(int w, int h)
	}

	Resized = true;
-	Uint32 ckey = Surface->format->colorkey;
-	int useckey = Surface->flags & SDL_SRCCOLORKEY;
+	Uint32 ckey;
+	bool useckey = !SDL_GetColorKey(Surface, &ckey);

	int bpp = Surface->format->BytesPerPixel;
	if (bpp == 1) {
@@ -1243,7 +1366,7 @@ void CGraphic::Resize(int w, int h)
		if (Surface->format->BytesPerPixel == 1) {
			VideoPaletteListAdd(Surface);
		}
-		SDL_SetPalette(Surface, SDL_LOGPAL | SDL_PHYSPAL, pal, 0, 256);
+		SDL_SetPaletteColors(Surface->format->palette, pal, 0, 256);
	} else {
		SDL_LockSurface(Surface);

@@ -1307,7 +1430,7 @@ void CGraphic::Resize(int w, int h)
										   Rmask, Gmask, Bmask, Amask);
	}
	if (useckey) {
-		SDL_SetColorKey(Surface, SDL_SRCCOLORKEY | SDL_RLEACCEL, ckey);
+		SDL_SetColorKey(Surface, SDL_TRUE, ckey);
	}
	Width = GraphicWidth = w;
	Height = GraphicHeight = h;
@@ -1380,7 +1503,9 @@ void CGraphic::SetOriginalSize()
 bool CGraphic::TransparentPixel(int x, int y)
 {
	int bpp = Surface->format->BytesPerPixel;
-	if ((bpp == 1 && !(Surface->flags & SDL_SRCCOLORKEY)) || bpp == 3) {
+	Uint32 colorkey;
+	bool has_colorkey = !SDL_GetColorKey(Surface, &colorkey);
+	if ((bpp == 1 && !has_colorkey) || bpp == 3) {
		return false;
	}

@@ -1388,12 +1513,12 @@ bool CGraphic::TransparentPixel(int x, i
	SDL_LockSurface(Surface);
	unsigned char *p = (unsigned char *)Surface->pixels + y * Surface->pitch + x * bpp;
	if (bpp == 1) {
-		if (*p == Surface->format->colorkey) {
+		if (*p == colorkey) {
			ret = true;
		}
	} else {
-		bool ckey = (Surface->flags & SDL_SRCCOLORKEY) > 0;
-		if (ckey && *p == Surface->format->colorkey) {
+		bool ckey = has_colorkey;
+		if (ckey && *p == colorkey) {
			ret = true;
		} else if (p[Surface->format->Ashift >> 3] == 255) {
			ret = true;
@@ -1416,8 +1541,8 @@ void CGraphic::MakeShadow()
	// Set all colors in the palette to black and use 50% alpha
	memset(colors, 0, sizeof(colors));

-	SDL_SetPalette(Surface, SDL_LOGPAL | SDL_PHYSPAL, colors, 0, 256);
-	SDL_SetAlpha(Surface, SDL_SRCALPHA | SDL_RLEACCEL, 128);
+	SDL_SetPaletteColors(Surface->format->palette, colors, 0, 256);
+	SDL_SetSurfaceAlphaMod(Surface, 128);

 #if defined(USE_OPENGL) || defined(USE_GLES)
	if (UseOpenGL) {
@@ -1431,8 +1556,8 @@ void CGraphic::MakeShadow()
 #endif
	{
		if (SurfaceFlip) {
-			SDL_SetPalette(SurfaceFlip, SDL_LOGPAL | SDL_PHYSPAL, colors, 0, 256);
-			SDL_SetAlpha(SurfaceFlip, SDL_SRCALPHA | SDL_RLEACCEL, 128);
+			SDL_SetPaletteColors(SurfaceFlip->format->palette, colors, 0, 256);
+			SDL_SetSurfaceAlphaMod(SurfaceFlip, 128);
		}
	}
 }
@@ -1462,6 +1587,7 @@ void CFiller::bits_map::Init(CGraphic *g
 {
	SDL_Surface *s = g->Surface;
	int bpp = s->format->BytesPerPixel;
+	unsigned int ckey;

	if (bstore) {
		free(bstore);
@@ -1470,7 +1596,7 @@ void CFiller::bits_map::Init(CGraphic *g
		Height = 0;
	}

-	if ((bpp == 1 && !(s->flags & SDL_SRCCOLORKEY)) || bpp == 3) {
+	if ((bpp == 1 && SDL_GetColorKey(s, &ckey) != 0) || bpp == 3) {
		return;
	}

@@ -1486,7 +1612,6 @@ void CFiller::bits_map::Init(CGraphic *g

	switch (s->format->BytesPerPixel) {
		case 1: {
-			int ckey = s->format->colorkey;
			unsigned char *ptr = (unsigned char *)s->pixels;

			for (int i = 0; i < Height; ++i) {
@@ -1508,8 +1633,8 @@ void CFiller::bits_map::Init(CGraphic *g
		case 3:
			break;
		case 4:
-			if ((s->flags & SDL_SRCCOLORKEY) == SDL_SRCCOLORKEY) {
-				unsigned int ckey = s->format->colorkey;
+		{
+			if (!SDL_GetColorKey(s, &ckey)) {
				unsigned int *ptr = (unsigned int *)s->pixels;

				for (int i = 0; i < Height; ++i) {
@@ -1543,6 +1668,7 @@ void CFiller::bits_map::Init(CGraphic *g
				}
			}
			break;
+		}
		default:
			break;
	}
diff -dupr stratagus_2.3.0.orig-old/src/video/movie.cpp stratagus_2.3.0.orig/src/video/movie.cpp
--- stratagus_2.3.0.orig-old/src/video/movie.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/video/movie.cpp	2015-07-05 04:01:11.890405438 +0200
@@ -101,12 +101,13 @@ static void MovieCallbackMouseExit()
 /**
 **  Draw Ogg data to the overlay
 */
-static int OutputTheora(OggData *data, SDL_Overlay *yuv_overlay, SDL_Rect *rect)
+static int OutputTheora(OggData *data, SDL_Texture *yuv_overlay, SDL_Rect *rect)
 {
	yuv_buffer yuv;

	theora_decode_YUVout(&data->tstate, &yuv);

+#if 0
	if (SDL_MUSTLOCK(TheScreen)) {
		if (SDL_LockSurface(TheScreen) < 0) {
			return - 1;
@@ -136,8 +137,11 @@ static int OutputTheora(OggData *data, S
		SDL_UnlockSurface(TheScreen);
	}
	SDL_UnlockYUVOverlay(yuv_overlay);
+#endif

-	SDL_DisplayYUVOverlay(yuv_overlay, rect);
+	SDL_UpdateYUVTexture(yuv_overlay, NULL, yuv.y, yuv.y_stride, yuv.u, yuv.uv_stride, yuv.v, yuv.uv_stride);
+	SDL_RenderCopy(TheRenderer, yuv_overlay, NULL, NULL);
+	SDL_RenderPresent(TheRenderer);

	return 0;
 }
@@ -217,16 +221,21 @@ int PlayMovie(const std::string &name)
	// When SDL_OPENGL is used, it is not possible to call SDL_CreateYUVOverlay, so turn temporary OpenGL off
	// With GLES is all ok
	if (UseOpenGL) {
-		SDL_SetVideoMode(Video.ViewportWidth, Video.ViewportHeight, Video.Depth, SDL_GetVideoSurface()->flags & ~SDL_OPENGL);
+		//SDL_SetVideoMode(Video.ViewportWidth, Video.ViewportHeight, Video.Depth, SDL_GetVideoSurface()->flags & ~SDL_OPENGL);
	}
 #endif

-	SDL_FillRect(SDL_GetVideoSurface(), NULL, 0);
+	SDL_RenderClear(TheRenderer);
	Video.ClearScreen();
-	SDL_Overlay *yuv_overlay = SDL_CreateYUVOverlay(data.tinfo.frame_width, data.tinfo.frame_height, SDL_YV12_OVERLAY, TheScreen);
+	SDL_Texture *yuv_overlay = SDL_CreateTexture(TheRenderer,
+	                                             SDL_PIXELFORMAT_YV12,
+	                                             SDL_TEXTUREACCESS_STREAMING,
+	                                             data.tinfo.frame_width,
+	                                             data.tinfo.frame_height);

	if (yuv_overlay == NULL) {
		fprintf(stderr, "SDL_CreateYUVOverlay: %s\n", SDL_GetError());
+		fprintf(stderr, "SDL_CreateYUVOverlay: %dx%d\n", data.tinfo.frame_width, data.tinfo.frame_height);
		OggFree(&data);
		f.close();
		return 0;
@@ -238,7 +247,7 @@ int PlayMovie(const std::string &name)
		if ((sample->Channels != 1 && sample->Channels != 2) || sample->SampleSize != 16) {
			fprintf(stderr, "Unsupported sound format in movie\n");
			delete sample;
-			SDL_FreeYUVOverlay(yuv_overlay);
+			SDL_DestroyTexture(yuv_overlay);
			OggFree(&data);
			f.close();
			return 0;
@@ -291,14 +300,14 @@ int PlayMovie(const std::string &name)
	}

	StopMusic();
-	SDL_FreeYUVOverlay(yuv_overlay);
+	SDL_DestroyTexture(yuv_overlay);

	OggFree(&data);
	f.close();

 #ifdef USE_OPENGL
	if (UseOpenGL) {
-		SDL_SetVideoMode(Video.ViewportWidth, Video.ViewportHeight, Video.Depth, SDL_GetVideoSurface()->flags | SDL_OPENGL);
+		//SDL_SetVideoMode(Video.ViewportWidth, Video.ViewportHeight, Video.Depth, SDL_GetVideoSurface()->flags | SDL_OPENGL);
		ReloadOpenGL();
	}
 #endif
diff -dupr stratagus_2.3.0.orig-old/src/video/png.cpp stratagus_2.3.0.orig/src/video/png.cpp
--- stratagus_2.3.0.orig-old/src/video/png.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/video/png.cpp	2015-12-16 12:51:43.691323033 +0100
@@ -221,21 +221,13 @@ int LoadGraphicPNG(CGraphic *g)
		}
	}
	SDL_Surface *surface =
-		SDL_AllocSurface(SDL_SWSURFACE, width, height,
+		SDL_CreateRGBSurface(SDL_SWSURFACE, width, height,
						 bit_depth * png_get_channels(png_ptr, info_ptr), Rmask, Gmask, Bmask, Amask);
	if (surface == NULL) {
		fprintf(stderr, "Out of memory");
		return -1;
	}

-	if (ckey != -1) {
-		if (color_type != PNG_COLOR_TYPE_PALETTE) {
-			/* FIXME: Should these be truncated or shifted down? */
-			ckey = SDL_MapRGB(surface->format, (Uint8)transv->red, (Uint8)transv->green, (Uint8)transv->blue);
-		}
-		SDL_SetColorKey(surface, SDL_SRCCOLORKEY, ckey);
-	}
-
	/* Create the array of pointers to image data */
	std::vector<png_bytep> row_pointers;
	row_pointers.resize(height);
@@ -259,6 +251,7 @@ int LoadGraphicPNG(CGraphic *g)
				palette->colors[i].r = i;
				palette->colors[i].g = i;
				palette->colors[i].b = i;
+				palette->colors[i].a = 0xff;
			}
		} else {
			png_colorp pngpalette;
@@ -270,11 +263,20 @@ int LoadGraphicPNG(CGraphic *g)
					palette->colors[i].b = pngpalette[i].blue;
					palette->colors[i].g = pngpalette[i].green;
					palette->colors[i].r = pngpalette[i].red;
+					palette->colors[i].a = 0xff;
				}
			}
		}
	}

+	if (ckey != -1) {
+		if (color_type != PNG_COLOR_TYPE_PALETTE) {
+			/* FIXME: Should these be truncated or shifted down? */
+			ckey = SDL_MapRGB(surface->format, (Uint8)transv->red, (Uint8)transv->green, (Uint8)transv->blue);
+		}
+		SDL_SetColorKey(surface, SDL_TRUE, ckey);
+	}
+
	g->Surface = surface;
	g->GraphicWidth = surface->w;
	g->GraphicHeight = surface->h;
diff -dupr stratagus_2.3.0.orig-old/src/video/sdl.cpp stratagus_2.3.0.orig/src/video/sdl.cpp
--- stratagus_2.3.0.orig-old/src/video/sdl.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/video/sdl.cpp	2015-12-14 13:23:22.694498094 +0100
@@ -112,6 +112,9 @@ static EGLDisplay eglDisplay;
 static EGLSurface eglSurface;
 #endif

+SDL_Window *TheWindow; /// Internal screen
+SDL_Renderer *TheRenderer = NULL; /// Internal screen
+SDL_Texture *TheTexture; /// Internal screen
 SDL_Surface *TheScreen; /// Internal screen

 static SDL_Rect Rects[100];
@@ -412,8 +415,8 @@ static void InitKey2Str()

	Key2Str[SDLK_DELETE] = "delete";

-	for (i = SDLK_KP0; i <= SDLK_KP9; ++i) {
-		snprintf(str, sizeof(str), "kp_%d", i - SDLK_KP0);
+	for (i = SDLK_KP_0; i <= SDLK_KP_9; ++i) {
+		snprintf(str, sizeof(str), "kp_%d", i - SDLK_KP_0);
		Key2Str[i] = str;
	}

@@ -442,12 +445,12 @@ static void InitKey2Str()
	}

	Key2Str[SDLK_HELP] = "help";
-	Key2Str[SDLK_PRINT] = "print";
+	Key2Str[SDLK_PRINTSCREEN] = "print";
	Key2Str[SDLK_SYSREQ] = "sysreq";
-	Key2Str[SDLK_BREAK] = "break";
+	Key2Str[SDLK_PAUSE] = "break";
	Key2Str[SDLK_MENU] = "menu";
	Key2Str[SDLK_POWER] = "power";
-	Key2Str[SDLK_EURO] = "euro";
+	//Key2Str[SDLK_EURO] = "euro";
	Key2Str[SDLK_UNDO] = "undo";
 }

@@ -461,12 +464,9 @@ void InitVideoSdl()
	if (SDL_WasInit(SDL_INIT_VIDEO) == 0) {
 #ifndef USE_WIN32
		// Fix tablet input in full-screen mode
-		SDL_putenv(strdup("SDL_MOUSE_RELATIVE=0"));
+		SDL_setenv("SDL_MOUSE_RELATIVE", "0", 1);
 #endif
		int res = SDL_Init(
-#ifdef DEBUG
-					  SDL_INIT_NOPARACHUTE |
-#endif
					  SDL_INIT_AUDIO | SDL_INIT_VIDEO |
					  SDL_INIT_TIMER);
		if (res < 0) {
@@ -487,75 +487,6 @@ void InitVideoSdl()
		signal(SIGSEGV, CleanExit);
		signal(SIGABRT, CleanExit);
 #endif
-		// Set WindowManager Title
-		if (!FullGameName.empty()) {
-			SDL_WM_SetCaption(FullGameName.c_str(), FullGameName.c_str());
-		} else if (!Parameters::Instance.applicationName.empty()) {
-			SDL_WM_SetCaption(Parameters::Instance.applicationName.c_str(), Parameters::Instance.applicationName.c_str());
-		} else {
-			SDL_WM_SetCaption("Stratagus", "Stratagus");
-		}
-
-#if ! defined(USE_WIN32) && ! defined(USE_MAEMO)
-
-#if defined(USE_OPENGL) || defined(USE_GLES)
-		// Make sure, that we not create OpenGL textures (and do not call OpenGL functions), when creating icon surface
-		bool UseOpenGL_orig = UseOpenGL;
-		UseOpenGL = false;
-#endif
-
-		SDL_Surface *icon = NULL;
-		CGraphic *g = NULL;
-		struct stat st;
-
-		std::string FullGameNameL = FullGameName;
-		for (size_t i = 0; i < FullGameNameL.size(); ++i) {
-			FullGameNameL[i] = tolower(FullGameNameL[i]);
-		}
-
-		std::string ApplicationName = Parameters::Instance.applicationName;
-		std::string ApplicationNameL = ApplicationName;
-		for (size_t i = 0; i < ApplicationNameL.size(); ++i) {
-			ApplicationNameL[i] = tolower(ApplicationNameL[i]);
-		}
-
-		std::vector <std::string> pixmaps;
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + FullGameName + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + FullGameNameL + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + FullGameName + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + FullGameNameL + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + ApplicationName + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + ApplicationNameL + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + ApplicationName + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + ApplicationNameL + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + "Stratagus" + ".png");
-		pixmaps.push_back(std::string() + PIXMAPS + "/" + "stratagus" + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + "Stratagus" + ".png");
-		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + "stratagus" + ".png");
-
-		for (size_t i = 0; i < pixmaps.size(); ++i) {
-			if (stat(pixmaps[i].c_str(), &st) == 0) {
-				if (g) { CGraphic::Free(g); }
-				g = CGraphic::New(pixmaps[i].c_str());
-				g->Load();
-				icon = g->Surface;
-				if (icon) { break; }
-			}
-		}
-
-		if (icon) {
-			SDL_WM_SetIcon(icon, 0);
-		}
-
-		if (g) {
-			CGraphic::Free(g);
-		}
-
-#if defined(USE_OPENGL) || defined(USE_GLES)
-		UseOpenGL = UseOpenGL_orig;
-#endif
-
-#endif
 #ifdef USE_WIN32
		HWND hwnd = NULL;
		HICON hicon = NULL;
@@ -587,13 +518,13 @@ void InitVideoSdl()
 #endif

 #if !defined(USE_OPENGL) && !defined(USE_GLES)
-	flags = SDL_HWSURFACE | SDL_HWPALETTE;
+	flags = 0;
 #endif

	// Sam said: better for windows.
	/* SDL_HWSURFACE|SDL_HWPALETTE | */
	if (Video.FullScreen) {
-		flags |= SDL_FULLSCREEN;
+		flags |= SDL_WINDOW_FULLSCREEN_DESKTOP;
	}

 #if defined(USE_OPENGL) || defined(USE_GLES)
@@ -618,7 +549,9 @@ void InitVideoSdl()
	}
 #endif

-	if (!Video.Width || !Video.Height) {
+	if (true || !Video.Width || !Video.Height) {
+		Video.ViewportWidth = Video.Width;
+		Video.ViewportHeight = Video.Height;
		Video.Width = 640;
		Video.Height = 480;
	}
@@ -627,31 +560,104 @@ void InitVideoSdl()
		Video.Depth = 32;
	}

+	const char *win_title = "Stratagus";
+	// Set WindowManager Title
+	if (!FullGameName.empty()) {
+		win_title = FullGameName.c_str();
+	} else if (!Parameters::Instance.applicationName.empty()) {
+		win_title = Parameters::Instance.applicationName.c_str();
+	}
+
 #if defined(USE_OPENGL) || defined(USE_GLES)
	if (!Video.ViewportWidth || !Video.ViewportHeight) {
		Video.ViewportWidth = Video.Width;
		Video.ViewportHeight = Video.Height;
	}
-	TheScreen = SDL_SetVideoMode(Video.ViewportWidth, Video.ViewportHeight, Video.Depth, flags);
-#else
-	TheScreen = SDL_SetVideoMode(Video.Width, Video.Height, Video.Depth, flags);
-#endif
-	if (TheScreen && (TheScreen->format->BitsPerPixel != 16
-					  && TheScreen->format->BitsPerPixel != 32)) {
-		// Only support 16 and 32 bpp, default to 16
-#if defined(USE_OPENGL) || defined(USE_GLES)
-		TheScreen = SDL_SetVideoMode(Video.ViewportWidth, Video.ViewportHeight, 16, flags);
+	TheWindow = SDL_CreateWindow(win_title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+	                             Video.ViewportWidth, Video.ViewportHeight, flags);
 #else
-		TheScreen = SDL_SetVideoMode(Video.Width, Video.Height, 16, flags);
+	TheWindow = SDL_CreateWindow(win_title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+	                             Video.ViewportWidth, Video.ViewportHeight, flags);
 #endif
-	}
-	if (TheScreen == NULL) {
+	if (TheWindow == NULL) {
		fprintf(stderr, "Couldn't set %dx%dx%d video mode: %s\n",
				Video.Width, Video.Height, Video.Depth, SDL_GetError());
		exit(1);
	}
+	if (!TheRenderer) TheRenderer = SDL_CreateRenderer(TheWindow, -1, 0);
+	SDL_RenderSetLogicalSize(TheRenderer, Video.Width, Video.Height);
+	SDL_SetRenderDrawColor(TheRenderer, 0, 0, 0, 255);
+	TheScreen = SDL_CreateRGBSurface(0, Video.Width, Video.Height, 32,
+	                                 0x00FF0000,
+	                                 0x0000FF00,
+	                                 0x000000FF,
+	                                 0); //0xFF000000);
+	TheTexture = SDL_CreateTexture(TheRenderer,
+	                               SDL_PIXELFORMAT_ARGB8888,
+	                               SDL_TEXTUREACCESS_STREAMING,
+	                               Video.Width, Video.Height);

-	Video.FullScreen = (TheScreen->flags & SDL_FULLSCREEN) ? 1 : 0;
+#if ! defined(USE_WIN32) && ! defined(USE_MAEMO)
+
+#if defined(USE_OPENGL) || defined(USE_GLES)
+		// Make sure, that we not create OpenGL textures (and do not call OpenGL functions), when creating icon surface
+		bool UseOpenGL_orig = UseOpenGL;
+		UseOpenGL = false;
+#endif
+
+		SDL_Surface *icon = NULL;
+		CGraphic *g = NULL;
+		struct stat st;
+
+		std::string FullGameNameL = FullGameName;
+		for (size_t i = 0; i < FullGameNameL.size(); ++i) {
+			FullGameNameL[i] = tolower(FullGameNameL[i]);
+		}
+
+		std::string ApplicationName = Parameters::Instance.applicationName;
+		std::string ApplicationNameL = ApplicationName;
+		for (size_t i = 0; i < ApplicationNameL.size(); ++i) {
+			ApplicationNameL[i] = tolower(ApplicationNameL[i]);
+		}
+
+		std::vector <std::string> pixmaps;
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + FullGameName + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + FullGameNameL + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + FullGameName + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + FullGameNameL + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + ApplicationName + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + ApplicationNameL + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + ApplicationName + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + ApplicationNameL + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + "Stratagus" + ".png");
+		pixmaps.push_back(std::string() + PIXMAPS + "/" + "stratagus" + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + "Stratagus" + ".png");
+		pixmaps.push_back(std::string() + "/usr/share/pixmaps" + "/" + "stratagus" + ".png");
+
+		for (size_t i = 0; i < pixmaps.size(); ++i) {
+			if (stat(pixmaps[i].c_str(), &st) == 0) {
+				if (g) { CGraphic::Free(g); }
+				g = CGraphic::New(pixmaps[i].c_str());
+				g->Load();
+				icon = g->Surface;
+				if (icon) { break; }
+			}
+		}
+
+		if (icon) {
+			SDL_SetWindowIcon(TheWindow, icon);
+		}
+
+		if (g) {
+			CGraphic::Free(g);
+		}
+
+#if defined(USE_OPENGL) || defined(USE_GLES)
+		UseOpenGL = UseOpenGL_orig;
+#endif
+
+#endif
+	Video.FullScreen = (SDL_GetWindowFlags(TheWindow) & SDL_WINDOW_FULLSCREEN_DESKTOP) ? 1 : 0;
	Video.Depth = TheScreen->format->BitsPerPixel;

 #if defined(USE_TOUCHSCREEN) && defined(USE_WIN32)
@@ -666,9 +672,6 @@ void InitVideoSdl()
	SDL_ShowCursor(SDL_DISABLE);
 #endif

-	// Make default character translation easier
-	SDL_EnableUNICODE(1);
-
 #if defined(USE_OPENGL) || defined(USE_GLES)
	if (UseOpenGL) {
 #ifdef USE_GLES_MAEMO
@@ -767,7 +770,8 @@ int VideoValidResolution(int w, int h)
		return 0;
	}
 #endif
-	return SDL_VideoModeOK(w, h, TheScreen->format->BitsPerPixel, TheScreen->flags);
+	//return SDL_VideoModeOK(w, h, TheScreen->format->BitsPerPixel, TheScreen->flags);
+	return 1;
 }

 /**
@@ -846,46 +850,57 @@ static void SdlDoEvent(const EventCallba
				int yw = UI.MouseWarpPos.y;
				UI.MouseWarpPos.x = -1;
				UI.MouseWarpPos.y = -1;
-				SDL_WarpMouse(xw, yw);
+				SDL_WarpMouseInWindow(TheWindow, xw, yw);
			}
			break;

-		case SDL_ACTIVEEVENT:
-			if (event.active.state & SDL_APPMOUSEFOCUS) {
-				static bool InMainWindow = true;
+		case SDL_WINDOWEVENT:
+			switch (event.window.event) {
+				case SDL_WINDOWEVENT_ENTER:
+				case SDL_WINDOWEVENT_LEAVE:
+				{
+					static bool InMainWindow = true;

-				if (InMainWindow && !event.active.gain) {
-					InputMouseExit(callbacks, SDL_GetTicks());
+					if (InMainWindow && (event.window.event == SDL_WINDOWEVENT_LEAVE)) {
+						InputMouseExit(callbacks, SDL_GetTicks());
+					}
+					InMainWindow = (event.window.event == SDL_WINDOWEVENT_ENTER);
				}
-				InMainWindow = (event.active.gain != 0);
-			}
-			if (!IsNetworkGame() && Preference.PauseOnLeave && (event.active.state & SDL_APPACTIVE || SDL_GetAppState() & SDL_APPACTIVE)) {
-				static bool DoTogglePause = false;
+				break;

-				if (IsSDLWindowVisible && !event.active.gain) {
-					IsSDLWindowVisible = false;
-					if (!GamePaused) {
-						DoTogglePause = true;
-						UiTogglePause();
-					}
-				} else if (!IsSDLWindowVisible && event.active.gain) {
-					IsSDLWindowVisible = true;
-					if (GamePaused && DoTogglePause) {
-						DoTogglePause = false;
-						UiTogglePause();
+				case SDL_WINDOWEVENT_FOCUS_GAINED:
+				case SDL_WINDOWEVENT_FOCUS_LOST:
+				{
+				if (!IsNetworkGame() && Preference.PauseOnLeave /*(SDL_GetWindowFlags(TheWindow) & SDL_WINDOW_INPUT_FOCUS)*/) {
+					static bool DoTogglePause = false;
+
+					if (IsSDLWindowVisible && (event.window.event == SDL_WINDOWEVENT_FOCUS_LOST)) {
+						IsSDLWindowVisible = false;
+						if (!GamePaused) {
+							DoTogglePause = true;
+							UiTogglePause();
+						}
+					} else if (!IsSDLWindowVisible && (event.window.event == SDL_WINDOWEVENT_FOCUS_GAINED)) {
+						IsSDLWindowVisible = true;
+						if (GamePaused && DoTogglePause) {
+							DoTogglePause = false;
+							UiTogglePause();
+						}
					}
				}
+				}
+				break;
			}
			break;

		case SDL_KEYDOWN:
			InputKeyButtonPress(callbacks, SDL_GetTicks(),
-								event.key.keysym.sym, event.key.keysym.unicode);
+								event.key.keysym.sym, event.key.keysym.sym < 128 ? event.key.keysym.sym : 0);
			break;

		case SDL_KEYUP:
			InputKeyButtonRelease(callbacks, SDL_GetTicks(),
-								  event.key.keysym.sym, event.key.keysym.unicode);
+								  event.key.keysym.sym, event.key.keysym.sym < 128 ? event.key.keysym.sym : 0);
			break;

		case SDL_QUIT:
@@ -999,14 +1014,20 @@ void RealizeVideoMemory()
		eglSwapBuffers(eglDisplay, eglSurface);
 #endif
 #if defined(USE_OPENGL) || defined(USE_GLES_NATIVE)
-		SDL_GL_SwapBuffers();
+		SDL_GL_SwapWindow(TheWindow);
 #endif
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	} else
 #endif
	{
		if (NumRects) {
-			SDL_UpdateRects(TheScreen, NumRects, Rects);
+			//SDL_UpdateWindowSurfaceRects(TheWindow, Rects, NumRects);
+			SDL_UpdateTexture(TheTexture, NULL, TheScreen->pixels, TheScreen->pitch);
+			//SDL_RenderClear(TheRenderer);
+			//for (int i = 0; i < NumRects; i++)
+			//    SDL_UpdateTexture(TheTexture, &Rects[i], TheScreen->pixels, TheScreen->pitch);
+			SDL_RenderCopy(TheRenderer, TheTexture, NULL, NULL);
+			SDL_RenderPresent(TheRenderer);
			NumRects = 0;
		}
	}
@@ -1078,7 +1099,7 @@ int Str2SdlKey(const char *str)
 */
 bool SdlGetGrabMouse()
 {
-	return SDL_WM_GrabInput(SDL_GRAB_QUERY) == SDL_GRAB_ON;
+	return SDL_GetWindowGrab(TheWindow);
 }

 /**
@@ -1091,9 +1112,9 @@ void ToggleGrabMouse(int mode)
	bool grabbed = SdlGetGrabMouse();

	if (mode <= 0 && grabbed) {
-		SDL_WM_GrabInput(SDL_GRAB_OFF);
+		SDL_SetWindowGrab(TheWindow, SDL_FALSE);
	} else if (mode >= 0 && !grabbed) {
-		SDL_WM_GrabInput(SDL_GRAB_ON);
+		SDL_SetWindowGrab(TheWindow, SDL_TRUE);
	}
 }

@@ -1106,72 +1127,17 @@ void ToggleFullScreen()
	// On Maemo is only supported fullscreen mode
	return;
 #endif
-#ifdef USE_WIN32
-	long framesize;
-	SDL_Rect clip;
	Uint32 flags;
-	int w;
-	int h;
-	int bpp;
-	unsigned char *pixels = NULL;
-	SDL_Color *palette = NULL;
-	int ncolors = 0;

-	if (!TheScreen) { // don't bother if there's no surface.
-		return;
-	}
+	flags = SDL_GetWindowFlags(TheWindow) & SDL_WINDOW_FULLSCREEN_DESKTOP;
+	SDL_GetWindowSize(TheWindow, &Video.ViewportWidth, &Video.ViewportHeight);

-	flags = TheScreen->flags;
-	w = TheScreen->w;
-	h = TheScreen->h;
-	bpp = TheScreen->format->BitsPerPixel;
+#ifdef USE_WIN32

-	if (!SDL_VideoModeOK(w, h, bpp,	flags ^ SDL_FULLSCREEN)) {
+	if (!TheWindow) { // don't bother if there's no surface.
		return;
	}
-
-	SDL_GetClipRect(TheScreen, &clip);
-
-	// save the contents of the screen.
-	framesize = w * h * TheScreen->format->BytesPerPixel;
-
-#if defined(USE_OPENGL) || defined(USE_GLES)
-	if (!UseOpenGL)
-#endif
-	{
-		if (!(pixels = new unsigned char[framesize])) { // out of memory
-			return;
-		}
-		SDL_LockSurface(TheScreen);
-		memcpy(pixels, TheScreen->pixels, framesize);
-
-		if (TheScreen->format->palette) {
-			ncolors = TheScreen->format->palette->ncolors;
-			if (!(palette = new SDL_Color[ncolors])) {
-				delete[] pixels;
-				return;
-			}
-			memcpy(palette, TheScreen->format->palette->colors,
-				   ncolors * sizeof(SDL_Color));
-		}
-		SDL_UnlockSurface(TheScreen);
-	}
-
-	TheScreen = SDL_SetVideoMode(w, h, bpp, flags ^ SDL_FULLSCREEN);
-	if (!TheScreen) {
-		TheScreen = SDL_SetVideoMode(w, h, bpp, flags);
-		if (!TheScreen) { // completely screwed.
-#if defined(USE_OPENGL) || defined(USE_GLES)
-			if (!UseOpenGL)
-#endif
-			{
-				delete[] pixels;
-				delete[] palette;
-			}
-			fprintf(stderr, "Toggle to fullscreen, crashed all\n");
-			Exit(-1);
-		}
-	}
+	SDL_SetWindowFullscreen(TheWindow, flags ^ SDL_WINDOW_FULLSCREEN_DESKTOP);

 #ifndef USE_TOUCHSCREEN
	// Cannot hide cursor on Windows with touchscreen, as it switches
@@ -1180,36 +1146,22 @@ void ToggleFullScreen()
	//
	// Windows shows the SDL cursor when starting in fullscreen mode
	// then switching to window mode.  This hides the cursor again.
-	SDL_ShowCursor(SDL_ENABLE);
-	SDL_ShowCursor(SDL_DISABLE);
+	//SDL_ShowCursor(SDL_ENABLE);
+	//SDL_ShowCursor(SDL_DISABLE);
 #endif

 #if defined(USE_OPENGL) || defined(USE_GLES)
	if (UseOpenGL) {
		ReloadOpenGL();
-	} else
-#endif
-	{
-		SDL_LockSurface(TheScreen);
-		memcpy(TheScreen->pixels, pixels, framesize);
-		delete[] pixels;
-
-		if (TheScreen->format->palette) {
-			// !!! FIXME : No idea if that flags param is right.
-			SDL_SetPalette(TheScreen, SDL_LOGPAL, palette, 0, ncolors);
-			delete[] palette;
-		}
-		SDL_UnlockSurface(TheScreen);
	}
-
-	SDL_SetClipRect(TheScreen, &clip);
+#endif

	Invalidate(); // Update display
 #else // !USE_WIN32
-	SDL_WM_ToggleFullScreen(TheScreen);
+	SDL_SetWindowFullscreen(TheWindow, flags ^ SDL_WINDOW_FULLSCREEN_DESKTOP);
 #endif

-	Video.FullScreen = (TheScreen->flags & SDL_FULLSCREEN) ? 1 : 0;
+	Video.FullScreen = (flags & SDL_WINDOW_FULLSCREEN_DESKTOP) ? 1 : 0;
 }

 //@}
diff -dupr stratagus_2.3.0.orig-old/src/video/video.cpp stratagus_2.3.0.orig/src/video/video.cpp
--- stratagus_2.3.0.orig-old/src/video/video.cpp	2015-03-19 18:19:41.000000000 +0100
+++ stratagus_2.3.0.orig/src/video/video.cpp	2015-12-15 15:15:43.022292648 +0100
@@ -291,7 +291,7 @@ bool CVideo::ResizeScreen(int w, int h)
			UI.Minimap.FreeOpenGL();
		}
 #endif
-		TheScreen = SDL_SetVideoMode(w, h, TheScreen->format->BitsPerPixel, TheScreen->flags);
+		SDL_SetWindowSize(TheWindow, w, h);
 #if defined(USE_OPENGL) || defined(USE_GLES)
		ViewportWidth = w;
		ViewportHeight = h;
@@ -423,7 +423,7 @@ static void ColorCycleSurface(SDL_Surfac
		memcpy(colors + range.begin, palcolors + range.begin + 1, (range.end - range.begin) * sizeof(SDL_Color));
		colors[range.end] = palcolors[range.begin];
	}
-	SDL_SetPalette(&surface, SDL_LOGPAL | SDL_PHYSPAL, colors, 0, 256);
+	SDL_SetPaletteColors(surface.format->palette, colors, 0, 256);
 }

 /**
@@ -444,7 +444,7 @@ static void ColorCycleSurface_Reverse(SD
			memcpy(colors + range.begin + 1, palcolors + range.begin, (range.end - range.begin) * sizeof(SDL_Color));
			colors[range.begin] = palcolors[range.end];
		}
-		SDL_SetPalette(&surface, SDL_LOGPAL | SDL_PHYSPAL, colors, 0, 256);
+		SDL_SetPaletteColors(surface.format->palette, colors, 0, 256);
	}
 }
